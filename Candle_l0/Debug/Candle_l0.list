
Candle_l0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d68  08001d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000068  20000010  08001d7c  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000080  20000078  08001d7c  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003c0d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bd2  00000000  00000000  00023c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000528  00000000  00000000  00024818  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  00024d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001bd7  00000000  00000000  000251f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000175e  00000000  00000000  00026dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00028525  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001180  00000000  00000000  000285a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001abc 	.word	0x08001abc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001abc 	.word	0x08001abc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <LL_RCC_MSI_GetRange+0x14>)
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	23e0      	movs	r3, #224	; 0xe0
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	4013      	ands	r3, r2
}
 800022e:	0018      	movs	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000

08000238 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_RCC_GetSysClkSource+0x14>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	220c      	movs	r2, #12
 8000242:	4013      	ands	r3, r2
}
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <LL_RCC_GetAHBPrescaler+0x14>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	22f0      	movs	r2, #240	; 0xf0
 800025a:	4013      	ands	r3, r2
}
 800025c:	0018      	movs	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40021000 	.word	0x40021000

08000268 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <LL_RCC_GetAPB1Prescaler+0x14>)
 800026e:	68da      	ldr	r2, [r3, #12]
 8000270:	23e0      	movs	r3, #224	; 0xe0
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	4013      	ands	r3, r2
}
 8000276:	0018      	movs	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40021000 	.word	0x40021000

08000280 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000286:	68da      	ldr	r2, [r3, #12]
 8000288:	23e0      	movs	r3, #224	; 0xe0
 800028a:	019b      	lsls	r3, r3, #6
 800028c:	4013      	ands	r3, r2
}
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000

08000298 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <LL_RCC_PLL_GetMainSource+0x14>)
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	025b      	lsls	r3, r3, #9
 80002a4:	4013      	ands	r3, r2
}
 80002a6:	0018      	movs	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40021000 	.word	0x40021000

080002b0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	23f0      	movs	r3, #240	; 0xf0
 80002ba:	039b      	lsls	r3, r3, #14
 80002bc:	4013      	ands	r3, r2
}
 80002be:	0018      	movs	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000

080002c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <LL_RCC_PLL_GetDivider+0x14>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	23c0      	movs	r3, #192	; 0xc0
 80002d2:	041b      	lsls	r3, r3, #16
 80002d4:	4013      	ands	r3, r2
}
 80002d6:	0018      	movs	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2210      	movs	r2, #16
 80002ea:	4013      	ands	r3, r2
 80002ec:	2b10      	cmp	r3, #16
 80002ee:	d101      	bne.n	80002f4 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80002f0:	2301      	movs	r3, #1
 80002f2:	e000      	b.n	80002f6 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	0018      	movs	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000308:	f000 f820 	bl	800034c <RCC_GetSystemClockFreq>
 800030c:	0002      	movs	r2, r0
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	0018      	movs	r0, r3
 8000318:	f000 f85c 	bl	80003d4 <RCC_GetHCLKClockFreq>
 800031c:	0002      	movs	r2, r0
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	0018      	movs	r0, r3
 8000328:	f000 f86a 	bl	8000400 <RCC_GetPCLK1ClockFreq>
 800032c:	0002      	movs	r2, r0
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	0018      	movs	r0, r3
 8000338:	f000 f876 	bl	8000428 <RCC_GetPCLK2ClockFreq>
 800033c:	0002      	movs	r2, r0
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60da      	str	r2, [r3, #12]
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000352:	f7ff ff71 	bl	8000238 <LL_RCC_GetSysClkSource>
 8000356:	0003      	movs	r3, r0
 8000358:	2b04      	cmp	r3, #4
 800035a:	d013      	beq.n	8000384 <RCC_GetSystemClockFreq+0x38>
 800035c:	d802      	bhi.n	8000364 <RCC_GetSystemClockFreq+0x18>
 800035e:	2b00      	cmp	r3, #0
 8000360:	d005      	beq.n	800036e <RCC_GetSystemClockFreq+0x22>
 8000362:	e021      	b.n	80003a8 <RCC_GetSystemClockFreq+0x5c>
 8000364:	2b08      	cmp	r3, #8
 8000366:	d017      	beq.n	8000398 <RCC_GetSystemClockFreq+0x4c>
 8000368:	2b0c      	cmp	r3, #12
 800036a:	d018      	beq.n	800039e <RCC_GetSystemClockFreq+0x52>
 800036c:	e01c      	b.n	80003a8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800036e:	f7ff ff57 	bl	8000220 <LL_RCC_MSI_GetRange>
 8000372:	0003      	movs	r3, r0
 8000374:	0b5b      	lsrs	r3, r3, #13
 8000376:	3301      	adds	r3, #1
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0212      	lsls	r2, r2, #8
 800037c:	409a      	lsls	r2, r3
 800037e:	0013      	movs	r3, r2
 8000380:	607b      	str	r3, [r7, #4]
      break;
 8000382:	e01c      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000384:	f7ff ffac 	bl	80002e0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d002      	beq.n	8000392 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <RCC_GetSystemClockFreq+0x7c>)
 800038e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000390:	e015      	b.n	80003be <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <RCC_GetSystemClockFreq+0x80>)
 8000394:	607b      	str	r3, [r7, #4]
      break;
 8000396:	e012      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <RCC_GetSystemClockFreq+0x84>)
 800039a:	607b      	str	r3, [r7, #4]
      break;
 800039c:	e00f      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800039e:	f000 f857 	bl	8000450 <RCC_PLL_GetFreqDomain_SYS>
 80003a2:	0003      	movs	r3, r0
 80003a4:	607b      	str	r3, [r7, #4]
      break;
 80003a6:	e00a      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80003a8:	f7ff ff3a 	bl	8000220 <LL_RCC_MSI_GetRange>
 80003ac:	0003      	movs	r3, r0
 80003ae:	0b5b      	lsrs	r3, r3, #13
 80003b0:	3301      	adds	r3, #1
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	0212      	lsls	r2, r2, #8
 80003b6:	409a      	lsls	r2, r3
 80003b8:	0013      	movs	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
      break;
 80003bc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80003be:	687b      	ldr	r3, [r7, #4]
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	003d0900 	.word	0x003d0900
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	007a1200 	.word	0x007a1200

080003d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80003dc:	f7ff ff38 	bl	8000250 <LL_RCC_GetAHBPrescaler>
 80003e0:	0003      	movs	r3, r0
 80003e2:	091b      	lsrs	r3, r3, #4
 80003e4:	220f      	movs	r2, #15
 80003e6:	4013      	ands	r3, r2
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <RCC_GetHCLKClockFreq+0x28>)
 80003ea:	5cd3      	ldrb	r3, [r2, r3]
 80003ec:	001a      	movs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	40d3      	lsrs	r3, r2
}
 80003f2:	0018      	movs	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	08001d44 	.word	0x08001d44

08000400 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000408:	f7ff ff2e 	bl	8000268 <LL_RCC_GetAPB1Prescaler>
 800040c:	0003      	movs	r3, r0
 800040e:	0a1b      	lsrs	r3, r3, #8
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <RCC_GetPCLK1ClockFreq+0x24>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	001a      	movs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	40d3      	lsrs	r3, r2
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	08001d54 	.word	0x08001d54

08000428 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000430:	f7ff ff26 	bl	8000280 <LL_RCC_GetAPB2Prescaler>
 8000434:	0003      	movs	r3, r0
 8000436:	0adb      	lsrs	r3, r3, #11
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <RCC_GetPCLK2ClockFreq+0x24>)
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	001a      	movs	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	40d3      	lsrs	r3, r2
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	08001d54 	.word	0x08001d54

08000450 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000456:	f7ff ff1f 	bl	8000298 <LL_RCC_PLL_GetMainSource>
 800045a:	0003      	movs	r3, r0
 800045c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d109      	bne.n	8000478 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000464:	f7ff ff3c 	bl	80002e0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d002      	beq.n	8000472 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800046e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000470:	e005      	b.n	800047e <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000474:	607b      	str	r3, [r7, #4]
      break;
 8000476:	e002      	b.n	800047e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800047a:	607b      	str	r3, [r7, #4]
      break;
 800047c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800047e:	f7ff ff17 	bl	80002b0 <LL_RCC_PLL_GetMultiplicator>
 8000482:	0003      	movs	r3, r0
 8000484:	0c9b      	lsrs	r3, r3, #18
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000488:	5cd3      	ldrb	r3, [r2, r3]
 800048a:	001a      	movs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4353      	muls	r3, r2
 8000490:	001c      	movs	r4, r3
 8000492:	f7ff ff19 	bl	80002c8 <LL_RCC_PLL_GetDivider>
 8000496:	0003      	movs	r3, r0
 8000498:	0d9b      	lsrs	r3, r3, #22
 800049a:	3301      	adds	r3, #1
 800049c:	0019      	movs	r1, r3
 800049e:	0020      	movs	r0, r4
 80004a0:	f7ff fe32 	bl	8000108 <__udivsi3>
 80004a4:	0003      	movs	r3, r0
}
 80004a6:	0018      	movs	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b003      	add	sp, #12
 80004ac:	bd90      	pop	{r4, r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	003d0900 	.word	0x003d0900
 80004b4:	00f42400 	.word	0x00f42400
 80004b8:	007a1200 	.word	0x007a1200
 80004bc:	08001d5c 	.word	0x08001d5c

080004c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004cc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_PWR_SetRegulModeLP>:
  *         @arg @ref LL_PWR_REGU_LPMODES_MAIN
  *         @arg @ref LL_PWR_REGU_LPMODES_LOW_POWER
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulModeLP(uint32_t RegulMode)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_LPSDSR, RegulMode);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_PWR_SetRegulModeLP+0x24>)
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <LL_PWR_SetRegulModeLP+0x24>)
 80004f8:	6812      	ldr	r2, [r2, #0]
 80004fa:	2101      	movs	r1, #1
 80004fc:	438a      	bics	r2, r1
 80004fe:	0011      	movs	r1, r2
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40007000 	.word	0x40007000

08000514 <LL_PWR_EnableUltraLowPower>:
  * @brief  Enable ultra low-power mode by enabling VREFINT switch off in low-power modes
  * @rmtoll CR    ULP       LL_PWR_EnableUltraLowPower
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableUltraLowPower(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_PWR_EnableUltraLowPower+0x18>)
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <LL_PWR_EnableUltraLowPower+0x18>)
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0089      	lsls	r1, r1, #2
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40007000 	.word	0x40007000

08000530 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll CR   CWUF       LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <LL_PWR_ClearFlag_WU+0x18>)
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <LL_PWR_ClearFlag_WU+0x18>)
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	2104      	movs	r1, #4
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40007000 	.word	0x40007000

0800054c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_LPM_EnableDeepSleep+0x18>)
 8000552:	4a04      	ldr	r2, [pc, #16]	; (8000564 <LL_LPM_EnableDeepSleep+0x18>)
 8000554:	6912      	ldr	r2, [r2, #16]
 8000556:	2104      	movs	r1, #4
 8000558:	430a      	orrs	r2, r1
 800055a:	611a      	str	r2, [r3, #16]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <App_Init>:
void _Sleep(void);
uint32_t _GetTrueRandomNumber(void);
void _App_SysTimerCallback(void);

void App_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
#ifdef DEBUG
  RCC->APB2ENR |= RCC_APB2ENR_DBGMCUEN;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <App_Init+0x60>)
 800056e:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <App_Init+0x60>)
 8000570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	03c9      	lsls	r1, r1, #15
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
#endif

  HW_Init();
 800057a:	f000 fe05 	bl	8001188 <HW_Init>

  Timer_DebounceInit(&g_ButtonDeb, true, APP_BUTTON_DEB_INTERVAL_MS);
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <App_Init+0x64>)
 8000580:	220a      	movs	r2, #10
 8000582:	2101      	movs	r1, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f917 	bl	80017b8 <Timer_DebounceInit>
  Timer_SetSysTickCallback(_App_SysTimerCallback);
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <App_Init+0x68>)
 800058c:	0018      	movs	r0, r3
 800058e:	f001 f8d1 	bl	8001734 <Timer_SetSysTickCallback>
  HW_SetTimCallback(App_TimCallback);
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <App_Init+0x6c>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 ff51 	bl	800143c <HW_SetTimCallback>

  g_nBatCtrlTime = 0;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <App_Init+0x70>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
  g_bInitializated = false;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <App_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
  g_nOffInterval = APP_OFF_INTERVAL_MS;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <App_Init+0x78>)
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <App_Init+0x7c>)
 80005aa:	601a      	str	r2, [r3, #0]
  g_nButtonState = true;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <App_Init+0x80>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
  g_nMode = APP_MODE_MODULATION;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <App_Init+0x84>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]

  while (g_nButtonState == true);
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <App_Init+0x80>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d0fb      	beq.n	80005ba <App_Init+0x52>
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	2000005c 	.word	0x2000005c
 80005d0:	08000879 	.word	0x08000879
 80005d4:	0800083d 	.word	0x0800083d
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	20000034 	.word	0x20000034
 80005e0:	20000070 	.word	0x20000070
 80005e4:	0036ee80 	.word	0x0036ee80
 80005e8:	20000074 	.word	0x20000074
 80005ec:	2000006c 	.word	0x2000006c

080005f0 <App_Exec>:

void App_Exec(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
   // SLEPP mod, wake up from PWM or Systick
  _Sleep();
 80005f6:	f000 f8d9 	bl	80007ac <_Sleep>

  if (Timer_GetTicks_ms() >= g_nBatCtrlTime)
 80005fa:	f001 f88f 	bl	800171c <Timer_GetTicks_ms>
 80005fe:	0002      	movs	r2, r0
 8000600:	000b      	movs	r3, r1
 8000602:	4941      	ldr	r1, [pc, #260]	; (8000708 <App_Exec+0x118>)
 8000604:	6809      	ldr	r1, [r1, #0]
 8000606:	6039      	str	r1, [r7, #0]
 8000608:	2100      	movs	r1, #0
 800060a:	6079      	str	r1, [r7, #4]
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4299      	cmp	r1, r3
 8000610:	d819      	bhi.n	8000646 <App_Exec+0x56>
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	4299      	cmp	r1, r3
 8000616:	d102      	bne.n	800061e <App_Exec+0x2e>
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	4291      	cmp	r1, r2
 800061c:	d813      	bhi.n	8000646 <App_Exec+0x56>
  {
    g_nBatCtrlTime = Timer_GetTicks_ms() + APP_MEASURE_BAT_CTRL_MS;
 800061e:	f001 f87d 	bl	800171c <Timer_GetTicks_ms>
 8000622:	0003      	movs	r3, r0
 8000624:	000c      	movs	r4, r1
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <App_Exec+0x11c>)
 8000628:	189a      	adds	r2, r3, r2
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <App_Exec+0x118>)
 800062c:	601a      	str	r2, [r3, #0]
    g_nMeasureTime = Timer_GetTicks_ms() + APP_MEASURE_OFFSET_MS;
 800062e:	f001 f875 	bl	800171c <Timer_GetTicks_ms>
 8000632:	0003      	movs	r3, r0
 8000634:	000c      	movs	r4, r1
 8000636:	3364      	adds	r3, #100	; 0x64
 8000638:	001a      	movs	r2, r3
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <App_Exec+0x120>)
 800063c:	601a      	str	r2, [r3, #0]
    HW_BatVoltageCtrl(true);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 fed7 	bl	80013f2 <HW_BatVoltageCtrl>
 8000644:	e017      	b.n	8000676 <App_Exec+0x86>
  }
  else if (Timer_GetTicks_ms() >= g_nMeasureTime)
 8000646:	f001 f869 	bl	800171c <Timer_GetTicks_ms>
 800064a:	0002      	movs	r2, r0
 800064c:	000b      	movs	r3, r1
 800064e:	4930      	ldr	r1, [pc, #192]	; (8000710 <App_Exec+0x120>)
 8000650:	6809      	ldr	r1, [r1, #0]
 8000652:	000c      	movs	r4, r1
 8000654:	2100      	movs	r1, #0
 8000656:	000d      	movs	r5, r1
 8000658:	429d      	cmp	r5, r3
 800065a:	d80c      	bhi.n	8000676 <App_Exec+0x86>
 800065c:	d101      	bne.n	8000662 <App_Exec+0x72>
 800065e:	4294      	cmp	r4, r2
 8000660:	d809      	bhi.n	8000676 <App_Exec+0x86>
  {
    g_nMeasureTime = Timer_GetTicks_ms() + APP_MEASURE_BAT_CTRL_MS;
 8000662:	f001 f85b 	bl	800171c <Timer_GetTicks_ms>
 8000666:	0003      	movs	r3, r0
 8000668:	000c      	movs	r4, r1
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <App_Exec+0x11c>)
 800066c:	189a      	adds	r2, r3, r2
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <App_Exec+0x120>)
 8000670:	601a      	str	r2, [r3, #0]
    HW_StartAdc();
 8000672:	f000 fe09 	bl	8001288 <HW_StartAdc>
  }

  if (HW_IsAdcConverted())
 8000676:	f000 ff33 	bl	80014e0 <HW_IsAdcConverted>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d016      	beq.n	80006ac <App_Exec+0xbc>
  {
    if (HW_GetBatVoltage() < APP_BATT_MIN_MV)
 800067e:	f000 feeb 	bl	8001458 <HW_GetBatVoltage>
 8000682:	0002      	movs	r2, r0
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <App_Exec+0x124>)
 8000686:	429a      	cmp	r2, r3
 8000688:	d802      	bhi.n	8000690 <App_Exec+0xa0>
    {
      g_nOffInterval = 0;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <App_Exec+0x128>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
    }

    HW_ResetAdcConverted();
 8000690:	f000 ff30 	bl	80014f4 <HW_ResetAdcConverted>
    if (!g_bInitializated)
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <App_Exec+0x12c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2201      	movs	r2, #1
 800069a:	4053      	eors	r3, r2
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <App_Exec+0xbc>
    {
      g_bInitializated = true;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <App_Exec+0x12c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
      HW_PwmOn();
 80006a8:	f000 fe88 	bl	80013bc <HW_PwmOn>
    }
  }

//  LL_IWDG_ReloadCounter(IWDG);

  if (g_nButtonState == true)
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <App_Exec+0x130>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d114      	bne.n	80006de <App_Exec+0xee>
  {
    g_nMode++;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <App_Exec+0x134>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <App_Exec+0x134>)
 80006bc:	601a      	str	r2, [r3, #0]
    while (g_nButtonState == true);
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <App_Exec+0x130>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d0fb      	beq.n	80006c0 <App_Exec+0xd0>
    if (g_nMode == APP_MODE_ON)
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <App_Exec+0x134>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d106      	bne.n	80006de <App_Exec+0xee>
    {
      HW_SetTimCallback(0);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 feb3 	bl	800143c <HW_SetTimCallback>
      HW_PwmSet(0xFFFF);
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <App_Exec+0x138>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fe5d 	bl	8001398 <HW_PwmSet>
    }
  }

  // shoutdown
  if (g_nOffInterval == 0 || g_nMode == APP_MODE_SHOUTDOWN)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <App_Exec+0x128>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <App_Exec+0xfe>
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <App_Exec+0x134>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d107      	bne.n	80006fe <App_Exec+0x10e>
  {
    // standby/stop
    HW_PwmOff();
 80006ee:	f000 fe70 	bl	80013d2 <HW_PwmOff>
    HW_SetWakeUpPin();
 80006f2:	f000 ff09 	bl	8001508 <HW_SetWakeUpPin>
    HW_SetLowPowerMode(true);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 f85e 	bl	80007b8 <HW_SetLowPowerMode>
    while(1);
 80006fc:	e7fe      	b.n	80006fc <App_Exec+0x10c>
  }

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bdb0      	pop	{r4, r5, r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000002c 	.word	0x2000002c
 800070c:	00002710 	.word	0x00002710
 8000710:	20000030 	.word	0x20000030
 8000714:	00000c7f 	.word	0x00000c7f
 8000718:	20000070 	.word	0x20000070
 800071c:	20000034 	.word	0x20000034
 8000720:	20000074 	.word	0x20000074
 8000724:	2000006c 	.word	0x2000006c
 8000728:	0000ffff 	.word	0x0000ffff

0800072c <_FrameControl>:

void _FrameControl(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  static uint16_t nDataIndex = 0;        // index to data array
  static uint32_t nNibble = 0;

  uint8_t nValue;
  if (nNibble & 0x01)
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <_FrameControl+0x74>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	d01a      	beq.n	8000772 <_FrameControl+0x46>
  {
    nValue = g_arrData[nDataIndex] & 0x0F;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <_FrameControl+0x78>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <_FrameControl+0x7c>)
 8000744:	5c9a      	ldrb	r2, [r3, r2]
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	210f      	movs	r1, #15
 800074a:	400a      	ands	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
    nDataIndex++;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_FrameControl+0x78>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <_FrameControl+0x78>)
 8000758:	801a      	strh	r2, [r3, #0]
    nDataIndex %= sizeof (g_arrData);
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <_FrameControl+0x78>)
 800075c:	881a      	ldrh	r2, [r3, #0]
 800075e:	2396      	movs	r3, #150	; 0x96
 8000760:	0099      	lsls	r1, r3, #2
 8000762:	0010      	movs	r0, r2
 8000764:	f7ff fd56 	bl	8000214 <__aeabi_uidivmod>
 8000768:	000b      	movs	r3, r1
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <_FrameControl+0x78>)
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	e007      	b.n	8000782 <_FrameControl+0x56>
  }
  else
  {
    nValue = g_arrData[nDataIndex] >> 4;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <_FrameControl+0x78>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	001a      	movs	r2, r3
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <_FrameControl+0x7c>)
 800077a:	5c9a      	ldrb	r2, [r3, r2]
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	0912      	lsrs	r2, r2, #4
 8000780:	701a      	strb	r2, [r3, #0]
  }

  HW_PwmSet(nValue);
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b29b      	uxth	r3, r3
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fe05 	bl	8001398 <HW_PwmSet>
  nNibble++;
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <_FrameControl+0x74>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <_FrameControl+0x74>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000038 	.word	0x20000038
 80007a4:	2000003c 	.word	0x2000003c
 80007a8:	08001ad4 	.word	0x08001ad4

080007ac <_Sleep>:

void _Sleep(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80007b0:	bf30      	wfi
//  APP_SYSTICK_ISR_OFF;
  __WFI();
//  APP_SYSTICK_ISR_ON;
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HW_SetLowPowerMode>:

void HW_SetLowPowerMode(bool bStandby)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
  // Adc_Disable();
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	055b      	lsls	r3, r3, #21
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fe79 	bl	80004c0 <LL_APB1_GRP1_EnableClock>
  LL_PWR_EnableUltraLowPower();
 80007ce:	f7ff fea1 	bl	8000514 <LL_PWR_EnableUltraLowPower>
  if (bStandby)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <HW_SetLowPowerMode+0x2e>
  {
    PWR->CR |= PWR_CR_PDDS;  // rozlisuje mody STANDBY | STOP
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HW_SetLowPowerMode+0x78>)
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HW_SetLowPowerMode+0x78>)
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
  }

  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HW_SetLowPowerMode+0x7c>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <HW_SetLowPowerMode+0x7c>)
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	438a      	bics	r2, r1
 80007f0:	601a      	str	r2, [r3, #0]
  LL_PWR_ClearFlag_WU();  // Clear Wakeup flag
 80007f2:	f7ff fe9d 	bl	8000530 <LL_PWR_ClearFlag_WU>
  LL_PWR_SetRegulModeLP(LL_PWR_REGU_LPMODES_LOW_POWER);  //PWR->CR |= PWR_CR_LPSDSR;
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fe78 	bl	80004ec <LL_PWR_SetRegulModeLP>
  LL_LPM_EnableDeepSleep();
 80007fc:	f7ff fea6 	bl	800054c <LL_LPM_EnableDeepSleep>

  __asm volatile ("wfi");
 8000800:	bf30      	wfi

  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HW_SetLowPowerMode+0x80>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HW_SetLowPowerMode+0x80>)
 8000806:	6912      	ldr	r2, [r2, #16]
 8000808:	2104      	movs	r1, #4
 800080a:	438a      	bics	r2, r1
 800080c:	611a      	str	r2, [r3, #16]
  LL_PWR_SetRegulModeLP(LL_PWR_REGU_LPMODES_MAIN);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fe6c 	bl	80004ec <LL_PWR_SetRegulModeLP>
  SysTick->VAL = 0;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <HW_SetLowPowerMode+0x7c>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HW_SetLowPowerMode+0x7c>)
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HW_SetLowPowerMode+0x7c>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]

//  Adc_Enable();
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40007000 	.word	0x40007000
 8000834:	e000e010 	.word	0xe000e010
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <App_TimCallback>:

void App_TimCallback(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  g_FrameCounter++;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <App_TimCallback+0x38>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <App_TimCallback+0x38>)
 800084a:	701a      	strb	r2, [r3, #0]
  g_FrameCounter %= 0xF;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <App_TimCallback+0x38>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	210f      	movs	r1, #15
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fcde 	bl	8000214 <__aeabi_uidivmod>
 8000858:	000b      	movs	r3, r1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <App_TimCallback+0x38>)
 800085e:	701a      	strb	r2, [r3, #0]
  if (g_FrameCounter == 0)
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <App_TimCallback+0x38>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <App_TimCallback+0x30>
  {
    _FrameControl();
 8000868:	f7ff ff60 	bl	800072c <_FrameControl>
  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000035 	.word	0x20000035

08000878 <_App_SysTimerCallback>:

void _App_SysTimerCallback(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  g_nButtonState = Timer_Debounce(&g_ButtonDeb, HW_IsButtonOn());
 800087c:	f000 fdd0 	bl	8001420 <HW_IsButtonOn>
 8000880:	0003      	movs	r3, r0
 8000882:	001a      	movs	r2, r3
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <_App_SysTimerCallback+0x34>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 ffac 	bl	80017e6 <Timer_Debounce>
 800088e:	0002      	movs	r2, r0
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_App_SysTimerCallback+0x38>)
 8000892:	601a      	str	r2, [r3, #0]

  if (g_nOffInterval > 0)
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <_App_SysTimerCallback+0x3c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <_App_SysTimerCallback+0x2e>
  {
    g_nOffInterval--;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <_App_SysTimerCallback+0x3c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <_App_SysTimerCallback+0x3c>)
 80008a4:	601a      	str	r2, [r3, #0]
  }
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000005c 	.word	0x2000005c
 80008b0:	20000074 	.word	0x20000074
 80008b4:	20000070 	.word	0x20000070

080008b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	435a      	muls	r2, r3
 80008ce:	0013      	movs	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	43db      	mvns	r3, r3
 80008d6:	400b      	ands	r3, r1
 80008d8:	001a      	movs	r2, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	434b      	muls	r3, r1
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	434b      	muls	r3, r1
 80008e4:	431a      	orrs	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	601a      	str	r2, [r3, #0]
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	434b      	muls	r3, r1
 800090e:	431a      	orrs	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	605a      	str	r2, [r3, #4]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6899      	ldr	r1, [r3, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	435a      	muls	r2, r3
 8000932:	0013      	movs	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	189b      	adds	r3, r3, r2
 8000938:	43db      	mvns	r3, r3
 800093a:	400b      	ands	r3, r1
 800093c:	001a      	movs	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	434b      	muls	r3, r1
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	434b      	muls	r3, r1
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	609a      	str	r2, [r3, #8]
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}

08000956 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	68d9      	ldr	r1, [r3, #12]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	435a      	muls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	189b      	adds	r3, r3, r2
 8000972:	43db      	mvns	r3, r3
 8000974:	400b      	ands	r3, r1
 8000976:	001a      	movs	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	434b      	muls	r3, r1
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	434b      	muls	r3, r1
 8000982:	431a      	orrs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	60da      	str	r2, [r3, #12]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}

08000990 <GPIO_ClockEnable>:
#include "stm32l0xx_ll_exti.h"
#include "stm32l0xx_ll_system.h"
#include "stm32l0xx_ll_bus.h"

void GPIO_ClockEnable(gpio_pins_e ePortPin)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]
  uint16_t nPort = ((uint32_t)GET_PORT(ePortPin) - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	230e      	movs	r3, #14
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	801a      	strh	r2, [r3, #0]
  RCC->IOPENR |= (1 << nPort);
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <GPIO_ClockEnable+0x38>)
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <GPIO_ClockEnable+0x38>)
 80009ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80009b0:	210e      	movs	r1, #14
 80009b2:	1879      	adds	r1, r7, r1
 80009b4:	8809      	ldrh	r1, [r1, #0]
 80009b6:	2001      	movs	r0, #1
 80009b8:	4088      	lsls	r0, r1
 80009ba:	0001      	movs	r1, r0
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b004      	add	sp, #16
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <GPIO_SetAFpin>:
{
  return (1 << (ePortPin & 0x0F));
}

void GPIO_SetAFpin(gpio_pins_e ePortPin, uint8_t nAF)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	1c0a      	adds	r2, r1, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  uint32_t nPin = ePortPin & 0xF;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	220f      	movs	r2, #15
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
  if (nPin < 8)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	d822      	bhi.n	8000a34 <GPIO_SetAFpin+0x68>
  {
    MODIFY_REG(GET_PORT(ePortPin)->AFR[0], GPIO_AFRL_AFSEL0 << (nPin << 2), nAF << (nPin << 2));
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	22a0      	movs	r2, #160	; 0xa0
 80009f8:	0352      	lsls	r2, r2, #13
 80009fa:	4694      	mov	ip, r2
 80009fc:	4463      	add	r3, ip
 80009fe:	029b      	lsls	r3, r3, #10
 8000a00:	1dfa      	adds	r2, r7, #7
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	0912      	lsrs	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	21a0      	movs	r1, #160	; 0xa0
 8000a0a:	0349      	lsls	r1, r1, #13
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	4462      	add	r2, ip
 8000a10:	0292      	lsls	r2, r2, #10
 8000a12:	6a12      	ldr	r2, [r2, #32]
 8000a14:	68f9      	ldr	r1, [r7, #12]
 8000a16:	0089      	lsls	r1, r1, #2
 8000a18:	200f      	movs	r0, #15
 8000a1a:	4088      	lsls	r0, r1
 8000a1c:	0001      	movs	r1, r0
 8000a1e:	43c9      	mvns	r1, r1
 8000a20:	400a      	ands	r2, r1
 8000a22:	1db9      	adds	r1, r7, #6
 8000a24:	7808      	ldrb	r0, [r1, #0]
 8000a26:	68f9      	ldr	r1, [r7, #12]
 8000a28:	0089      	lsls	r1, r1, #2
 8000a2a:	4088      	lsls	r0, r1
 8000a2c:	0001      	movs	r1, r0
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	621a      	str	r2, [r3, #32]
  else
  {
    nPin -= 8;
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
  }
}
 8000a32:	e024      	b.n	8000a7e <GPIO_SetAFpin+0xb2>
    nPin -= 8;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3b08      	subs	r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	22a0      	movs	r2, #160	; 0xa0
 8000a44:	0352      	lsls	r2, r2, #13
 8000a46:	4694      	mov	ip, r2
 8000a48:	4463      	add	r3, ip
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	1dfa      	adds	r2, r7, #7
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	0912      	lsrs	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	21a0      	movs	r1, #160	; 0xa0
 8000a56:	0349      	lsls	r1, r1, #13
 8000a58:	468c      	mov	ip, r1
 8000a5a:	4462      	add	r2, ip
 8000a5c:	0292      	lsls	r2, r2, #10
 8000a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	0089      	lsls	r1, r1, #2
 8000a64:	200f      	movs	r0, #15
 8000a66:	4088      	lsls	r0, r1
 8000a68:	0001      	movs	r1, r0
 8000a6a:	43c9      	mvns	r1, r1
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	1db9      	adds	r1, r7, #6
 8000a70:	7808      	ldrb	r0, [r1, #0]
 8000a72:	68f9      	ldr	r1, [r7, #12]
 8000a74:	0089      	lsls	r1, r1, #2
 8000a76:	4088      	lsls	r0, r1
 8000a78:	0001      	movs	r1, r0
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <GPIO_ConfigPin>:
  /* Return source */
  return pinsource;
}

void GPIO_ConfigPin(gpio_pins_e ePin, pin_mode_e eMode, pin_output_type_e eOutType, pin_pushpull_e ePull, pin_speed_e eSpeed)
{
 8000a86:	b5b0      	push	{r4, r5, r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	0005      	movs	r5, r0
 8000a8e:	000c      	movs	r4, r1
 8000a90:	0010      	movs	r0, r2
 8000a92:	0019      	movs	r1, r3
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	1c2a      	adds	r2, r5, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	1c22      	adds	r2, r4, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	1d7b      	adds	r3, r7, #5
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	1c0a      	adds	r2, r1, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
  GPIO_ClockEnable(ePin);
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff6d 	bl	8000990 <GPIO_ClockEnable>

  LL_GPIO_SetPinMode(GET_PORT(ePin), GET_PIN(ePin), eMode);
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	22a0      	movs	r2, #160	; 0xa0
 8000ac0:	0352      	lsls	r2, r2, #13
 8000ac2:	4694      	mov	ip, r2
 8000ac4:	4463      	add	r3, ip
 8000ac6:	029b      	lsls	r3, r3, #10
 8000ac8:	0018      	movs	r0, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	220f      	movs	r2, #15
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	0019      	movs	r1, r3
 8000ada:	1dbb      	adds	r3, r7, #6
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	001a      	movs	r2, r3
 8000ae0:	f7ff feea 	bl	80008b8 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinOutputType(GET_PORT(ePin), GET_PIN(ePin), eOutType);
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	22a0      	movs	r2, #160	; 0xa0
 8000aee:	0352      	lsls	r2, r2, #13
 8000af0:	4694      	mov	ip, r2
 8000af2:	4463      	add	r3, ip
 8000af4:	029b      	lsls	r3, r3, #10
 8000af6:	0018      	movs	r0, r3
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	220f      	movs	r2, #15
 8000afe:	4013      	ands	r3, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	0019      	movs	r1, r3
 8000b08:	1d7b      	adds	r3, r7, #5
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	f7ff fef0 	bl	80008f2 <LL_GPIO_SetPinOutputType>

  LL_GPIO_SetPinPull(GET_PORT(ePin), GET_PIN(ePin), ePull);
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	22a0      	movs	r2, #160	; 0xa0
 8000b1c:	0352      	lsls	r2, r2, #13
 8000b1e:	4694      	mov	ip, r2
 8000b20:	4463      	add	r3, ip
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	0018      	movs	r0, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2201      	movs	r2, #1
 8000b30:	409a      	lsls	r2, r3
 8000b32:	0013      	movs	r3, r2
 8000b34:	0019      	movs	r1, r3
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	f7ff ff0b 	bl	8000956 <LL_GPIO_SetPinPull>

  LL_GPIO_SetPinSpeed(GET_PORT(ePin), GET_PIN(ePin), eSpeed);
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	22a0      	movs	r2, #160	; 0xa0
 8000b4a:	0352      	lsls	r2, r2, #13
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	4463      	add	r3, ip
 8000b50:	029b      	lsls	r3, r3, #10
 8000b52:	0018      	movs	r0, r3
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	220f      	movs	r2, #15
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	0019      	movs	r1, r3
 8000b64:	2318      	movs	r3, #24
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	f7ff fed6 	bl	800091c <LL_GPIO_SetPinSpeed>
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bdb0      	pop	{r4, r5, r7, pc}

08000b78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	0002      	movs	r2, r0
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <NVIC_EnableIRQ+0x28>)
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	221f      	movs	r2, #31
 8000b8e:	400a      	ands	r2, r1
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d932      	bls.n	8000c20 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000bba:	4c2f      	ldr	r4, [pc, #188]	; (8000c78 <NVIC_SetPriority+0xd4>)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	3b08      	subs	r3, #8
 8000bc8:	0899      	lsrs	r1, r3, #2
 8000bca:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	4003      	ands	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3306      	adds	r3, #6
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	18d3      	adds	r3, r2, r3
 8000be0:	3304      	adds	r3, #4
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1dfa      	adds	r2, r7, #7
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	0010      	movs	r0, r2
 8000bea:	2203      	movs	r2, #3
 8000bec:	4002      	ands	r2, r0
 8000bee:	00d2      	lsls	r2, r2, #3
 8000bf0:	20ff      	movs	r0, #255	; 0xff
 8000bf2:	4090      	lsls	r0, r2
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	43d2      	mvns	r2, r2
 8000bf8:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	20ff      	movs	r0, #255	; 0xff
 8000c00:	4018      	ands	r0, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	001d      	movs	r5, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	402b      	ands	r3, r5
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4098      	lsls	r0, r3
 8000c10:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000c12:	431a      	orrs	r2, r3
 8000c14:	1d8b      	adds	r3, r1, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18e3      	adds	r3, r4, r3
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000c1e:	e027      	b.n	8000c70 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000c20:	4c16      	ldr	r4, [pc, #88]	; (8000c7c <NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	4914      	ldr	r1, [pc, #80]	; (8000c7c <NVIC_SetPriority+0xd8>)
 8000c2c:	1dfa      	adds	r2, r7, #7
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	b252      	sxtb	r2, r2
 8000c32:	0892      	lsrs	r2, r2, #2
 8000c34:	32c0      	adds	r2, #192	; 0xc0
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	5852      	ldr	r2, [r2, r1]
 8000c3a:	1df9      	adds	r1, r7, #7
 8000c3c:	7809      	ldrb	r1, [r1, #0]
 8000c3e:	0008      	movs	r0, r1
 8000c40:	2103      	movs	r1, #3
 8000c42:	4001      	ands	r1, r0
 8000c44:	00c9      	lsls	r1, r1, #3
 8000c46:	20ff      	movs	r0, #255	; 0xff
 8000c48:	4088      	lsls	r0, r1
 8000c4a:	0001      	movs	r1, r0
 8000c4c:	43c9      	mvns	r1, r1
 8000c4e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	0192      	lsls	r2, r2, #6
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	4010      	ands	r0, r2
 8000c58:	1dfa      	adds	r2, r7, #7
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	0015      	movs	r5, r2
 8000c5e:	2203      	movs	r2, #3
 8000c60:	402a      	ands	r2, r5
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	4090      	lsls	r0, r2
 8000c66:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	33c0      	adds	r3, #192	; 0xc0
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	511a      	str	r2, [r3, r4]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bdb0      	pop	{r4, r5, r7, pc}
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <LL_APB1_GRP1_EnableClock>:
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c8c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000cb8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZ, Periphs);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x1c>)
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x1c>)
 8000ce4:	6891      	ldr	r1, [r2, #8]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40015800 	.word	0x40015800

08000cf8 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000d08:	401a      	ands	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	fdffffff 	.word	0xfdffffff

08000d20 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d30:	401a      	ands	r2, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	ff3fffff 	.word	0xff3fffff

08000d48 <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	089a      	lsrs	r2, r3, #2
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LL_ADC_SetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2218      	movs	r2, #24
 8000d7a:	4393      	bics	r3, r2
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60da      	str	r2, [r3, #12]
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <LL_ADC_SetLowPowerMode>:
  *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
  *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF), LowPowerMode);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <LL_ADC_SetLowPowerMode+0x24>)
 8000da0:	401a      	ands	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60da      	str	r2, [r3, #12]
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	ffff3fff 	.word	0xffff3fff

08000db8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	4393      	bics	r3, r2
 8000dca:	001a      	movs	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	615a      	str	r2, [r3, #20]
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LL_ADC_REG_SetSequencerChannels>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	035b      	lsls	r3, r3, #13
 8000dea:	0b5a      	lsrs	r2, r3, #13
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4393      	bics	r3, r2
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	611a      	str	r2, [r3, #16]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LL_ADC_ConfigOverSamplingRatioShift>:
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <LL_ADC_ConfigOverSamplingRatioShift+0x28>)
 8000e2e:	401a      	ands	r2, r3
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	fffffe03 	.word	0xfffffe03

08000e48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <LL_ADC_Enable+0x20>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	2201      	movs	r2, #1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	7fffffe8 	.word	0x7fffffe8

08000e6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <LL_ADC_REG_StartConversion+0x20>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	7fffffe8 	.word	0x7fffffe8

08000e90 <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	b2db      	uxtb	r3, r3
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}

08000ede <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4393      	bics	r3, r2
 8000eee:	001a      	movs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1a      	ldr	r2, [r3, #32]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	621a      	str	r2, [r3, #32]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	43d2      	mvns	r2, r2
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	621a      	str	r2, [r3, #32]
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d00d      	beq.n	8000f9a <LL_TIM_OC_SetMode+0x2e>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b10      	cmp	r3, #16
 8000f82:	d008      	beq.n	8000f96 <LL_TIM_OC_SetMode+0x2a>
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d101      	bne.n	8000f92 <LL_TIM_OC_SetMode+0x26>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e004      	b.n	8000f9c <LL_TIM_OC_SetMode+0x30>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e002      	b.n	8000f9c <LL_TIM_OC_SetMode+0x30>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e000      	b.n	8000f9c <LL_TIM_OC_SetMode+0x30>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	001a      	movs	r2, r3
 8000fa4:	0029      	movs	r1, r5
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LL_TIM_OC_SetMode+0x6c>)
 8000fa8:	5c5b      	ldrb	r3, [r3, r1]
 8000faa:	18d3      	adds	r3, r2, r3
 8000fac:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	0029      	movs	r1, r5
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LL_TIM_OC_SetMode+0x70>)
 8000fb4:	5c52      	ldrb	r2, [r2, r1]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	2273      	movs	r2, #115	; 0x73
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	0029      	movs	r1, r5
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <LL_TIM_OC_SetMode+0x70>)
 8000fc4:	5c5b      	ldrb	r3, [r3, r1]
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	408b      	lsls	r3, r1
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	6023      	str	r3, [r4, #0]
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd8:	08001d2c 	.word	0x08001d2c
 8000fdc:	08001d34 	.word	0x08001d34

08000fe0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d00d      	beq.n	800100e <LL_TIM_OC_SetPolarity+0x2e>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d008      	beq.n	800100a <LL_TIM_OC_SetPolarity+0x2a>
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d101      	bne.n	8001006 <LL_TIM_OC_SetPolarity+0x26>
 8001002:	2304      	movs	r3, #4
 8001004:	e004      	b.n	8001010 <LL_TIM_OC_SetPolarity+0x30>
 8001006:	2306      	movs	r3, #6
 8001008:	e002      	b.n	8001010 <LL_TIM_OC_SetPolarity+0x30>
 800100a:	2302      	movs	r3, #2
 800100c:	e000      	b.n	8001010 <LL_TIM_OC_SetPolarity+0x30>
 800100e:	2300      	movs	r3, #0
 8001010:	001c      	movs	r4, r3
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	0021      	movs	r1, r4
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <LL_TIM_OC_SetPolarity+0x60>)
 800101a:	5c52      	ldrb	r2, [r2, r1]
 800101c:	0011      	movs	r1, r2
 800101e:	2202      	movs	r2, #2
 8001020:	408a      	lsls	r2, r1
 8001022:	43d2      	mvns	r2, r2
 8001024:	401a      	ands	r2, r3
 8001026:	0021      	movs	r1, r4
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_TIM_OC_SetPolarity+0x60>)
 800102a:	5c5b      	ldrb	r3, [r3, r1]
 800102c:	0019      	movs	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	408b      	lsls	r3, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	621a      	str	r2, [r3, #32]
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b005      	add	sp, #20
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	08001d3c 	.word	0x08001d3c

08001044 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d00d      	beq.n	8001070 <LL_TIM_OC_EnablePreload+0x2c>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d008      	beq.n	800106c <LL_TIM_OC_EnablePreload+0x28>
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	429a      	cmp	r2, r3
 8001062:	d101      	bne.n	8001068 <LL_TIM_OC_EnablePreload+0x24>
 8001064:	2304      	movs	r3, #4
 8001066:	e004      	b.n	8001072 <LL_TIM_OC_EnablePreload+0x2e>
 8001068:	2306      	movs	r3, #6
 800106a:	e002      	b.n	8001072 <LL_TIM_OC_EnablePreload+0x2e>
 800106c:	2302      	movs	r3, #2
 800106e:	e000      	b.n	8001072 <LL_TIM_OC_EnablePreload+0x2e>
 8001070:	2300      	movs	r3, #0
 8001072:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3318      	adds	r3, #24
 8001078:	001a      	movs	r2, r3
 800107a:	0029      	movs	r1, r5
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LL_TIM_OC_EnablePreload+0x5c>)
 800107e:	5c5b      	ldrb	r3, [r3, r1]
 8001080:	18d3      	adds	r3, r2, r3
 8001082:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001084:	6822      	ldr	r2, [r4, #0]
 8001086:	0029      	movs	r1, r5
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <LL_TIM_OC_EnablePreload+0x60>)
 800108a:	5c5b      	ldrb	r3, [r3, r1]
 800108c:	0019      	movs	r1, r3
 800108e:	2308      	movs	r3, #8
 8001090:	408b      	lsls	r3, r1
 8001092:	4313      	orrs	r3, r2
 8001094:	6023      	str	r3, [r4, #0]
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	08001d2c 	.word	0x08001d2c
 80010a4:	08001d34 	.word	0x08001d34

080010a8 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60da      	str	r2, [r3, #12]
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	2201      	movs	r2, #1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	615a      	str	r2, [r3, #20]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LL_RCC_MSI_SetRange>:
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <LL_RCC_MSI_SetRange+0x20>)
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <LL_RCC_MSI_SetRange+0x20>)
 8001104:	6852      	ldr	r2, [r2, #4]
 8001106:	4905      	ldr	r1, [pc, #20]	; (800111c <LL_RCC_MSI_SetRange+0x24>)
 8001108:	4011      	ands	r1, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	ffff1fff 	.word	0xffff1fff

08001120 <LL_PWR_SetRegulVoltageScaling>:
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <LL_PWR_SetRegulVoltageScaling+0x20>)
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <LL_PWR_SetRegulVoltageScaling+0x20>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4905      	ldr	r1, [pc, #20]	; (8001144 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001130:	4011      	ands	r1, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40007000 	.word	0x40007000
 8001144:	ffffe7ff 	.word	0xffffe7ff

08001148 <LL_PWR_EnableWakeUpPin>:
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  SET_BIT(PWR->CSR, WakeUpPin);
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <LL_PWR_EnableWakeUpPin+0x1c>)
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <LL_PWR_EnableWakeUpPin+0x1c>)
 8001154:	6851      	ldr	r1, [r2, #4]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40007000 	.word	0x40007000

08001168 <LL_PWR_IsActiveFlag_VOS>:
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2210      	movs	r2, #16
 8001172:	4013      	ands	r3, r2
 8001174:	3b10      	subs	r3, #16
 8001176:	425a      	negs	r2, r3
 8001178:	4153      	adcs	r3, r2
 800117a:	b2db      	uxtb	r3, r3
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40007000 	.word	0x40007000

08001188 <HW_Init>:
void _Gpio_Init(void);
void _PwmInit(void);
void _CalculateAdcVoltage(void);

void HW_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  // Change MSI frequency to 1 MHz
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_4);   // 1 MHz
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ffb1 	bl	80010f8 <LL_RCC_MSI_SetRange>

  // set voltage range 3
  while (LL_PWR_IsActiveFlag_VOS());
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	f7ff ffe6 	bl	8001168 <LL_PWR_IsActiveFlag_VOS>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d1fb      	bne.n	8001198 <HW_Init+0x10>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 80011a0:	23c0      	movs	r3, #192	; 0xc0
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff ffbb 	bl	8001120 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS());
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	f7ff ffdc 	bl	8001168 <LL_PWR_IsActiveFlag_VOS>
 80011b0:	1e03      	subs	r3, r0, #0
 80011b2:	d1fb      	bne.n	80011ac <HW_Init+0x24>

  Timer_Init();
 80011b4:	f000 fa98 	bl	80016e8 <Timer_Init>
  _Gpio_Init();
 80011b8:	f000 f876 	bl	80012a8 <_Gpio_Init>
  _PwmInit();
 80011bc:	f000 f896 	bl	80012ec <_PwmInit>

  _AD_Init();
 80011c0:	f000 f804 	bl	80011cc <_AD_Init>
//  /* add time out here for a robust application */
//  }
//
//  LL_IWDG_ReloadCounter(IWDG);

}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <_AD_Init>:

void _AD_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  // Configure ADC INPUT pins as analog input
   // asi neni treba konfigurovat, po resetu jsou vstupy v analog input
   RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <_AD_Init+0xac>)
 80011d2:	4a29      	ldr	r2, [pc, #164]	; (8001278 <_AD_Init+0xac>)
 80011d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
   //  GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODE4)) | GPIO_MODER_MODE4;

   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fd63 	bl	8000cac <LL_APB2_GRP1_EnableClock>

   // ADC clock PCLK/2 (Synchronous clock mode) (ADC clock = 1MHz)
   LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_SYNC_PCLK_DIV2);
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <_AD_Init+0xb0>)
 80011ec:	0019      	movs	r1, r3
 80011ee:	0010      	movs	r0, r2
 80011f0:	f7ff fdaa 	bl	8000d48 <LL_ADC_SetClock>

   LL_ADC_SetCommonFrequencyMode(ADC1_COMMON, LL_ADC_CLOCK_FREQ_MODE_LOW);
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	049b      	lsls	r3, r3, #18
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <_AD_Init+0xb4>)
 80011fa:	0019      	movs	r1, r3
 80011fc:	0010      	movs	r0, r2
 80011fe:	f7ff fd7b 	bl	8000cf8 <LL_ADC_SetCommonFrequencyMode>
   LL_ADC_SetResolution(ADC1, LL_ADC_RESOLUTION_8B);
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <_AD_Init+0xb0>)
 8001204:	2110      	movs	r1, #16
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff fdaf 	bl	8000d6a <LL_ADC_SetResolution>
   LL_ADC_SetLowPowerMode(ADC1, LL_ADC_LP_AUTOPOWEROFF);
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	4a1a      	ldr	r2, [pc, #104]	; (800127c <_AD_Init+0xb0>)
 8001212:	0019      	movs	r1, r3
 8001214:	0010      	movs	r0, r2
 8001216:	f7ff fdbb 	bl	8000d90 <LL_ADC_SetLowPowerMode>

   // set oversampling, ! bity CKMODE registru CFGR2 musi byt nastaveny pred jakymkoliv nastaveni ADC - viz datasheet !
   LL_ADC_ConfigOverSamplingRatioShift(ADC1, LL_ADC_OVS_RATIO_16, LL_ADC_OVS_SHIFT_RIGHT_4);
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <_AD_Init+0xb0>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	210c      	movs	r1, #12
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff fdfb 	bl	8000e1c <LL_ADC_ConfigOverSamplingRatioShift>
   LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_GRP_REGULAR_CONTINUED);
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_AD_Init+0xb0>)
 8001228:	2101      	movs	r1, #1
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fde4 	bl	8000df8 <LL_ADC_SetOverSamplingScope>

   LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <_AD_Init+0xb0>)
 8001232:	2107      	movs	r1, #7
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fdbf 	bl	8000db8 <LL_ADC_SetSamplingTimeCommonChannels>
//   {
//     /* For robust implementation, add here time-out management */
//   }
//

   LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_VREFINT);
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	03db      	lsls	r3, r3, #15
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <_AD_Init+0xb4>)
 8001240:	0019      	movs	r1, r3
 8001242:	0010      	movs	r0, r2
 8001244:	f7ff fd6c 	bl	8000d20 <LL_ADC_SetCommonPathInternalCh>
   LL_ADC_REG_SetSequencerChannels(ADC1, HW_OPTO_CH | HW_BATT_CH);
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <_AD_Init+0xb8>)
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <_AD_Init+0xb0>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff fdc4 	bl	8000ddc <LL_ADC_REG_SetSequencerChannels>

   NVIC_SetPriority(ADC1_COMP_IRQn, 2);
 8001254:	2102      	movs	r1, #2
 8001256:	200c      	movs	r0, #12
 8001258:	f7ff fca4 	bl	8000ba4 <NVIC_SetPriority>
   NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800125c:	200c      	movs	r0, #12
 800125e:	f7ff fc8b 	bl	8000b78 <NVIC_EnableIRQ>

   LL_ADC_EnableIT_EOC(ADC1);
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <_AD_Init+0xb0>)
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff fe1e 	bl	8000ea6 <LL_ADC_EnableIT_EOC>

   LL_ADC_Enable(ADC1);
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <_AD_Init+0xb0>)
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff fdeb 	bl	8000e48 <LL_ADC_Enable>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40012400 	.word	0x40012400
 8001280:	40012708 	.word	0x40012708
 8001284:	10000011 	.word	0x10000011

08001288 <HW_StartAdc>:

void HW_StartAdc(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  g_nActualAdcChannel = hw_adc_opto;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HW_StartAdc+0x18>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
  LL_ADC_REG_StartConversion(ADC1);
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HW_StartAdc+0x1c>)
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fde9 	bl	8000e6c <LL_ADC_REG_StartConversion>
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000040 	.word	0x20000040
 80012a4:	40012400 	.word	0x40012400

080012a8 <_Gpio_Init>:

void _Gpio_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af02      	add	r7, sp, #8
//  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);

  // led
  GPIO_ConfigPin(HW_LED, mode_alternate, outtype_pushpull, pushpull_no, speed_medium);
 80012ae:	2301      	movs	r3, #1
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	2200      	movs	r2, #0
 80012b6:	2102      	movs	r1, #2
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fbe4 	bl	8000a86 <GPIO_ConfigPin>
  GPIO_SetAFpin(HW_LED, LL_GPIO_AF_2);
 80012be:	2102      	movs	r1, #2
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fb83 	bl	80009cc <GPIO_SetAFpin>

  // batt ctrl
  GPIO_ConfigPin(HW_BATT_CTRL, mode_output, outtype_pushpull, pushpull_no, speed_medium);
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2101      	movs	r1, #1
 80012d0:	2007      	movs	r0, #7
 80012d2:	f7ff fbd8 	bl	8000a86 <GPIO_ConfigPin>

  // button
  GPIO_ConfigPin(HW_BUTTON, mode_input, outtype_pushpull, pushpull_down, speed_medium);
 80012d6:	2301      	movs	r3, #1
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2302      	movs	r3, #2
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fbd0 	bl	8000a86 <GPIO_ConfigPin>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_PwmInit>:
//
//  return nValue;
//}

void _PwmInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff fcc4 	bl	8000c80 <LL_APB1_GRP1_EnableClock>

  LL_RCC_ClocksTypeDef  RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80012f8:	003b      	movs	r3, r7
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff f800 	bl	8000300 <LL_RCC_GetSystemClocksFreq>

  LL_TIM_SetPrescaler(TIM_PWM, RCC_Clocks.PCLK1_Frequency / (100 * PWM_STEPS));  // frekvence PWM
 8001300:	003b      	movs	r3, r7
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	23c8      	movs	r3, #200	; 0xc8
 8001306:	00d9      	lsls	r1, r3, #3
 8001308:	0010      	movs	r0, r2
 800130a:	f7fe fefd 	bl	8000108 <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	001a      	movs	r2, r3
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	05db      	lsls	r3, r3, #23
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fdef 	bl	8000efc <LL_TIM_SetPrescaler>
  LL_TIM_SetAutoReload(TIM_PWM, PWM_STEPS - 2);
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	210e      	movs	r1, #14
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fdf5 	bl	8000f14 <LL_TIM_SetAutoReload>

  LL_TIM_OC_SetMode(TIM_PWM, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2260      	movs	r2, #96	; 0x60
 8001330:	2110      	movs	r1, #16
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fe1a 	bl	8000f6c <LL_TIM_OC_SetMode>
  LL_TIM_OC_EnablePreload(TIM_PWM, LL_TIM_CHANNEL_CH2);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	2110      	movs	r1, #16
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff fe80 	bl	8001044 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_SetPolarity(TIM_PWM, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_LOW);
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	2202      	movs	r2, #2
 800134a:	2110      	movs	r1, #16
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fe47 	bl	8000fe0 <LL_TIM_OC_SetPolarity>
  LL_TIM_CC_EnableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2110      	movs	r1, #16
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff fde7 	bl	8000f2c <LL_TIM_CC_EnableChannel>

  LL_TIM_GenerateEvent_UPDATE(TIM_PWM);
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff feba 	bl	80010dc <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_EnableIT_UPDATE(TIM_PWM);
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff fea7 	bl	80010c0 <LL_TIM_EnableIT_UPDATE>

  // povolit preruseni od TIM3
  NVIC_SetPriority(TIM2_IRQn, 1);    // Set priority
 8001372:	2101      	movs	r1, #1
 8001374:	200f      	movs	r0, #15
 8001376:	f7ff fc15 	bl	8000ba4 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);         // Enable _IRQn
 800137a:	200f      	movs	r0, #15
 800137c:	f7ff fbfc 	bl	8000b78 <NVIC_EnableIRQ>

#ifdef DEBUG
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM2_STOP);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fca9 	bl	8000cd8 <LL_DBGMCU_APB1_GRP1_FreezePeriph>
#endif


  LL_TIM_EnableCounter(TIM_PWM);
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fd99 	bl	8000ec2 <LL_TIM_EnableCounter>
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}

08001398 <HW_PwmSet>:

void HW_PwmSet(uint16_t nValue)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	801a      	strh	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH2(TIM_PWM, nValue);
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fe7a 	bl	80010a8 <LL_TIM_OC_SetCompareCH2>
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HW_PwmOn>:

void HW_PwmOn(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  LL_TIM_CC_EnableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	2110      	movs	r1, #16
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fdb0 	bl	8000f2c <LL_TIM_CC_EnableChannel>
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HW_PwmOff>:

void HW_PwmOff(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  LL_TIM_CC_DisableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2110      	movs	r1, #16
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff fdb4 	bl	8000f4a <LL_TIM_CC_DisableChannel>
  LL_TIM_DisableCounter(TIM_PWM);
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fd79 	bl	8000ede <LL_TIM_DisableCounter>
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HW_BatVoltageCtrl>:
{
  bEnable ? LED_ON : LED_OFF;
}

void HW_BatVoltageCtrl(bool bEnable)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	0002      	movs	r2, r0
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	701a      	strb	r2, [r3, #0]
  bEnable ? BATT_CTRL_EN : BATT_CTRL_DIS;
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HW_BatVoltageCtrl+0x1e>
 8001406:	23a0      	movs	r3, #160	; 0xa0
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140e:	e003      	b.n	8001418 <HW_BatVoltageCtrl+0x26>
  bEnable ? BATT_CTRL_EN : BATT_CTRL_DIS;
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	619a      	str	r2, [r3, #24]
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <HW_IsButtonOn>:

bool HW_IsButtonOn(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  return (GET_PORT(HW_BUTTON)->IDR & GET_PIN(HW_BUTTON)) ? true : false;
 8001424:	23a0      	movs	r3, #160	; 0xa0
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	4193      	sbcs	r3, r2
 8001432:	b2db      	uxtb	r3, r3
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HW_SetTimCallback>:

void HW_SetTimCallback(PtrTimIntCb pTimCb)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  g_pTimCb = pTimCb;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HW_SetTimCallback+0x18>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	20000048 	.word	0x20000048

08001458 <HW_GetBatVoltage>:

uint32_t HW_GetBatVoltage(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  return g_nBatVoltage_mV;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <HW_GetBatVoltage+0x10>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	20000000 	.word	0x20000000

0800146c <_CalculateAdcVoltage>:
{
  return g_nOptoVoltage_mV;
}

void _CalculateAdcVoltage(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  // calculate opto voltage
  g_nOptoVoltage_mV = (uint32_t)g_nAdcValues[hw_adc_opto] * HW_ADC_VOLTAGE_MV / 256;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <_CalculateAdcVoltage+0x64>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	001a      	movs	r2, r3
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <_CalculateAdcVoltage+0x68>)
 8001478:	4353      	muls	r3, r2
 800147a:	0a1a      	lsrs	r2, r3, #8
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <_CalculateAdcVoltage+0x6c>)
 800147e:	601a      	str	r2, [r3, #0]
  g_nOptoVoltage_mV = g_nOptoVoltage_mV * HW_ADC_RESISTOR_DIVIDER_OPTO;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <_CalculateAdcVoltage+0x6c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	22fa      	movs	r2, #250	; 0xfa
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	435a      	muls	r2, r3
 800148a:	23fa      	movs	r3, #250	; 0xfa
 800148c:	0099      	lsls	r1, r3, #2
 800148e:	0010      	movs	r0, r2
 8001490:	f7fe fe3a 	bl	8000108 <__udivsi3>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <_CalculateAdcVoltage+0x6c>)
 800149a:	601a      	str	r2, [r3, #0]

  // calculate batt voltage
  g_nBatVoltage_mV = (uint32_t)g_nAdcValues[hw_adc_batt] * HW_ADC_VOLTAGE_MV / 256;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <_CalculateAdcVoltage+0x64>)
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	001a      	movs	r2, r3
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <_CalculateAdcVoltage+0x68>)
 80014a4:	4353      	muls	r3, r2
 80014a6:	0a1a      	lsrs	r2, r3, #8
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <_CalculateAdcVoltage+0x70>)
 80014aa:	601a      	str	r2, [r3, #0]
  g_nBatVoltage_mV = g_nBatVoltage_mV * HW_ADC_RESISTOR_DIVIDER_BATT;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <_CalculateAdcVoltage+0x70>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	22fa      	movs	r2, #250	; 0xfa
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	435a      	muls	r2, r3
 80014b6:	2358      	movs	r3, #88	; 0x58
 80014b8:	33ff      	adds	r3, #255	; 0xff
 80014ba:	0019      	movs	r1, r3
 80014bc:	0010      	movs	r0, r2
 80014be:	f7fe fe23 	bl	8000108 <__udivsi3>
 80014c2:	0003      	movs	r3, r0
 80014c4:	001a      	movs	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <_CalculateAdcVoltage+0x70>)
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000044 	.word	0x20000044
 80014d4:	00000bb8 	.word	0x00000bb8
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000000 	.word	0x20000000

080014e0 <HW_IsAdcConverted>:

bool HW_IsAdcConverted(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return g_bAdcConverted;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HW_IsAdcConverted+0x10>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000046 	.word	0x20000046

080014f4 <HW_ResetAdcConverted>:

void HW_ResetAdcConverted(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  g_bAdcConverted = false;
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <HW_ResetAdcConverted+0x10>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000046 	.word	0x20000046

08001508 <HW_SetWakeUpPin>:

void HW_SetWakeUpPin(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	055b      	lsls	r3, r3, #21
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fbb5 	bl	8000c80 <LL_APB1_GRP1_EnableClock>
  LL_PWR_EnableWakeUpPin(LL_PWR_WAKEUP_PIN1);
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff fe14 	bl	8001148 <LL_PWR_EnableWakeUpPin>
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	af00      	add	r7, sp, #0
  g_nAdcValues[g_nActualAdcChannel] = LL_ADC_REG_ReadConversionData8(ADC1);
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <ADC1_COMP_IRQHandler+0x40>)
 800152e:	681c      	ldr	r4, [r3, #0]
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <ADC1_COMP_IRQHandler+0x44>)
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff fcac 	bl	8000e90 <LL_ADC_REG_ReadConversionData8>
 8001538:	0003      	movs	r3, r0
 800153a:	001a      	movs	r2, r3
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <ADC1_COMP_IRQHandler+0x48>)
 800153e:	551a      	strb	r2, [r3, r4]
  g_nActualAdcChannel++;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <ADC1_COMP_IRQHandler+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <ADC1_COMP_IRQHandler+0x40>)
 8001548:	601a      	str	r2, [r3, #0]
  if (g_nActualAdcChannel == hw_adc_sizeof)
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <ADC1_COMP_IRQHandler+0x40>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d107      	bne.n	8001562 <ADC1_COMP_IRQHandler+0x3a>
  {
    g_bAdcConverted = true;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <ADC1_COMP_IRQHandler+0x4c>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
    HW_BatVoltageCtrl(false);
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff4a 	bl	80013f2 <HW_BatVoltageCtrl>
    _CalculateAdcVoltage();
 800155e:	f7ff ff85 	bl	800146c <_CalculateAdcVoltage>
  }
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	20000040 	.word	0x20000040
 800156c:	40012400 	.word	0x40012400
 8001570:	20000044 	.word	0x20000044
 8001574:	20000046 	.word	0x20000046

08001578 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  if (!(TIM_PWM->SR & TIM_SR_UIF))
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d00f      	beq.n	80015a8 <TIM2_IRQHandler+0x30>
  {
    return;
  }

  TIM_PWM->SR &= ~TIM_SR_UIF;
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	05db      	lsls	r3, r3, #23
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	05d2      	lsls	r2, r2, #23
 8001590:	6912      	ldr	r2, [r2, #16]
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	611a      	str	r2, [r3, #16]

  if (g_pTimCb)
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <TIM2_IRQHandler+0x38>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <TIM2_IRQHandler+0x32>
  {
    g_pTimCb();
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <TIM2_IRQHandler+0x38>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4798      	blx	r3
 80015a6:	e000      	b.n	80015aa <TIM2_IRQHandler+0x32>
    return;
 80015a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	20000048 	.word	0x20000048

080015b4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  App_Init();
 80015b8:	f7fe ffd6 	bl	8000568 <App_Init>

  while(1)
  {
    App_Exec();
 80015bc:	f7ff f818 	bl	80005f0 <App_Exec>
 80015c0:	e7fc      	b.n	80015bc <main+0x8>
	...

080015c4 <NVIC_SetPriority>:
{
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	0002      	movs	r2, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b7f      	cmp	r3, #127	; 0x7f
 80015d8:	d932      	bls.n	8001640 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80015da:	4c2f      	ldr	r4, [pc, #188]	; (8001698 <NVIC_SetPriority+0xd4>)
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	001a      	movs	r2, r3
 80015e2:	230f      	movs	r3, #15
 80015e4:	4013      	ands	r3, r2
 80015e6:	3b08      	subs	r3, #8
 80015e8:	0899      	lsrs	r1, r3, #2
 80015ea:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <NVIC_SetPriority+0xd4>)
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	230f      	movs	r3, #15
 80015f4:	4003      	ands	r3, r0
 80015f6:	3b08      	subs	r3, #8
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3306      	adds	r3, #6
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	18d3      	adds	r3, r2, r3
 8001600:	3304      	adds	r3, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1dfa      	adds	r2, r7, #7
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	0010      	movs	r0, r2
 800160a:	2203      	movs	r2, #3
 800160c:	4002      	ands	r2, r0
 800160e:	00d2      	lsls	r2, r2, #3
 8001610:	20ff      	movs	r0, #255	; 0xff
 8001612:	4090      	lsls	r0, r2
 8001614:	0002      	movs	r2, r0
 8001616:	43d2      	mvns	r2, r2
 8001618:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	20ff      	movs	r0, #255	; 0xff
 8001620:	4018      	ands	r0, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001d      	movs	r5, r3
 8001628:	2303      	movs	r3, #3
 800162a:	402b      	ands	r3, r5
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4098      	lsls	r0, r3
 8001630:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001632:	431a      	orrs	r2, r3
 8001634:	1d8b      	adds	r3, r1, #6
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18e3      	adds	r3, r4, r3
 800163a:	3304      	adds	r3, #4
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	e027      	b.n	8001690 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001640:	4c16      	ldr	r4, [pc, #88]	; (800169c <NVIC_SetPriority+0xd8>)
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	4914      	ldr	r1, [pc, #80]	; (800169c <NVIC_SetPriority+0xd8>)
 800164c:	1dfa      	adds	r2, r7, #7
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	b252      	sxtb	r2, r2
 8001652:	0892      	lsrs	r2, r2, #2
 8001654:	32c0      	adds	r2, #192	; 0xc0
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	5852      	ldr	r2, [r2, r1]
 800165a:	1df9      	adds	r1, r7, #7
 800165c:	7809      	ldrb	r1, [r1, #0]
 800165e:	0008      	movs	r0, r1
 8001660:	2103      	movs	r1, #3
 8001662:	4001      	ands	r1, r0
 8001664:	00c9      	lsls	r1, r1, #3
 8001666:	20ff      	movs	r0, #255	; 0xff
 8001668:	4088      	lsls	r0, r1
 800166a:	0001      	movs	r1, r0
 800166c:	43c9      	mvns	r1, r1
 800166e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	0192      	lsls	r2, r2, #6
 8001674:	20ff      	movs	r0, #255	; 0xff
 8001676:	4010      	ands	r0, r2
 8001678:	1dfa      	adds	r2, r7, #7
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	0015      	movs	r5, r2
 800167e:	2203      	movs	r2, #3
 8001680:	402a      	ands	r2, r5
 8001682:	00d2      	lsls	r2, r2, #3
 8001684:	4090      	lsls	r0, r2
 8001686:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001688:	430a      	orrs	r2, r1
 800168a:	33c0      	adds	r3, #192	; 0xc0
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	511a      	str	r2, [r3, r4]
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	e000ed00 	.word	0xe000ed00
 800169c:	e000e100 	.word	0xe000e100

080016a0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <SysTick_Config+0x40>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <SysTick_Config+0x16>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e010      	b.n	80016d8 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <SysTick_Config+0x44>)
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	3a01      	subs	r2, #1
 80016bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80016be:	2301      	movs	r3, #1
 80016c0:	425b      	negs	r3, r3
 80016c2:	2103      	movs	r1, #3
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ff7d 	bl	80015c4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SysTick_Config+0x44>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x44>)
 80016d2:	2207      	movs	r2, #7
 80016d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	00ffffff 	.word	0x00ffffff
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <Timer_Init>:
static volatile timer_tick_t g_nTicks = 0;

PtrSysTickCallback pSysTickCallback = 0;

void Timer_Init()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 80016ec:	f000 f928 	bl	8001940 <SystemCoreClockUpdate>
  if (SysTick_Config(SystemCoreClock / 1000))
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <Timer_Init+0x30>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	23fa      	movs	r3, #250	; 0xfa
 80016f6:	0099      	lsls	r1, r3, #2
 80016f8:	0010      	movs	r0, r2
 80016fa:	f7fe fd05 	bl	8000108 <__udivsi3>
 80016fe:	0003      	movs	r3, r0
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ffcd 	bl	80016a0 <SysTick_Config>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d000      	beq.n	800170c <Timer_Init+0x24>
  {
    /* Capture error */
    while (1);
 800170a:	e7fe      	b.n	800170a <Timer_Init+0x22>
  }

  TimerUs_init();
 800170c:	f000 f846 	bl	800179c <TimerUs_init>
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20000008 	.word	0x20000008

0800171c <Timer_GetTicks_ms>:
  nDelayTimer = delay_ms;
  while (nDelayTimer);
}

timer_tick_t Timer_GetTicks_ms()
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	af00      	add	r7, sp, #0
  return g_nTicks;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <Timer_GetTicks_ms+0x14>)
 8001722:	685c      	ldr	r4, [r3, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
}
 8001726:	0018      	movs	r0, r3
 8001728:	0021      	movs	r1, r4
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	20000050 	.word	0x20000050

08001734 <Timer_SetSysTickCallback>:

void Timer_SetSysTickCallback(PtrSysTickCallback pFunction)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  pSysTickCallback = pFunction;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <Timer_SetSysTickCallback+0x18>)
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000058 	.word	0x20000058

08001750 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	af00      	add	r7, sp, #0
  g_nTicks++;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <SysTick_Handler+0x40>)
 8001756:	685c      	ldr	r4, [r3, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	2200      	movs	r2, #0
 800175e:	185b      	adds	r3, r3, r1
 8001760:	4154      	adcs	r4, r2
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <SysTick_Handler+0x40>)
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	6054      	str	r4, [r2, #4]
  if (nDelayTimer)
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <SysTick_Handler+0x44>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <SysTick_Handler+0x2a>
  {
    nDelayTimer--;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <SysTick_Handler+0x44>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <SysTick_Handler+0x44>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  if (pSysTickCallback)
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <SysTick_Handler+0x48>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SysTick_Handler+0x38>
  {
    pSysTickCallback();
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Handler+0x48>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4798      	blx	r3
  }
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20000050 	.word	0x20000050
 8001794:	2000004c 	.word	0x2000004c
 8001798:	20000058 	.word	0x20000058

0800179c <TimerUs_init>:


// timer for us counting
void TimerUs_init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    // Enable clock for TIM22
    RCC->APB2ENR |= TIMER_US_CLK;
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <TimerUs_init+0x18>)
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <TimerUs_init+0x18>)
 80017a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017a6:	2104      	movs	r1, #4
 80017a8:	430a      	orrs	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000

080017b8 <Timer_DebounceInit>:
{
  TIMER_US->CR1 &= ~TIM_CR1_CEN;
}

void Timer_DebounceInit(TimerDebounce_t* deb, uint32_t nInitState, uint32_t nDebounceInterval_ms)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  deb->nPreviousDebounced = nInitState;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	605a      	str	r2, [r3, #4]
  deb->nDebounceInterval_ms = nDebounceInterval_ms;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]
  deb->nLastTime_ms = Timer_GetTicks_ms();
 80017d0:	f7ff ffa4 	bl	800171c <Timer_GetTicks_ms>
 80017d4:	0003      	movs	r3, r0
 80017d6:	000c      	movs	r4, r1
 80017d8:	001a      	movs	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b005      	add	sp, #20
 80017e4:	bd90      	pop	{r4, r7, pc}

080017e6 <Timer_Debounce>:

uint32_t Timer_Debounce(TimerDebounce_t* deb, uint32_t nCurrentState)
{
 80017e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
  if (deb->nPreviousNotDebounced == nCurrentState)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11a      	bne.n	8001830 <Timer_Debounce+0x4a>
  {
    if ((Timer_GetTicks_ms() - deb->nLastTime_ms) > deb->nDebounceInterval_ms)
 80017fa:	f7ff ff8f 	bl	800171c <Timer_GetTicks_ms>
 80017fe:	0003      	movs	r3, r0
 8001800:	000c      	movs	r4, r1
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	603a      	str	r2, [r7, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	1a5b      	subs	r3, r3, r1
 8001812:	4194      	sbcs	r4, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	68d2      	ldr	r2, [r2, #12]
 8001818:	0015      	movs	r5, r2
 800181a:	2200      	movs	r2, #0
 800181c:	0016      	movs	r6, r2
 800181e:	42b4      	cmp	r4, r6
 8001820:	d802      	bhi.n	8001828 <Timer_Debounce+0x42>
 8001822:	d10f      	bne.n	8001844 <Timer_Debounce+0x5e>
 8001824:	42ab      	cmp	r3, r5
 8001826:	d90d      	bls.n	8001844 <Timer_Debounce+0x5e>
    {
      deb->nPreviousDebounced = nCurrentState;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e009      	b.n	8001844 <Timer_Debounce+0x5e>
    }
  }
  else
  {
    deb->nPreviousNotDebounced = nCurrentState;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	609a      	str	r2, [r3, #8]
    deb->nLastTime_ms = Timer_GetTicks_ms();
 8001836:	f7ff ff71 	bl	800171c <Timer_GetTicks_ms>
 800183a:	0003      	movs	r3, r0
 800183c:	000c      	movs	r4, r1
 800183e:	001a      	movs	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	601a      	str	r2, [r3, #0]
  }

  return deb->nPreviousDebounced;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b005      	add	sp, #20
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001850:	4813      	ldr	r0, [pc, #76]	; (80018a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001852:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001854:	2004      	movs	r0, #4
    LDR R1, [R0]
 8001856:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001858:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800185a:	221f      	movs	r2, #31
    CMP R1, R2
 800185c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800185e:	d105      	bne.n	800186c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8001862:	2101      	movs	r1, #1
    STR R1, [R0]
 8001864:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001866:	4810      	ldr	r0, [pc, #64]	; (80018a8 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8001868:	2100      	movs	r1, #0
    STR R1, [R0]
 800186a:	6001      	str	r1, [r0, #0]

0800186c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800186c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800186e:	e003      	b.n	8001878 <LoopCopyDataInit>

08001870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8001872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001876:	3104      	adds	r1, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopForever+0x12>)
  ldr  r3, =_edata
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <LoopForever+0x16>)
  adds  r2, r0, r1
 800187c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001880:	d3f6      	bcc.n	8001870 <CopyDataInit>
  ldr  r2, =_sbss
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopForever+0x1a>)
  b  LoopFillZerobss
 8001884:	e002      	b.n	800188c <LoopFillZerobss>

08001886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001886:	2300      	movs	r3, #0
  str  r3, [r2]
 8001888:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188a:	3204      	adds	r2, #4

0800188c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <LoopForever+0x1e>)
  cmp  r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001890:	d3f9      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001892:	f000 f817 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f000 f8ed 	bl	8001a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff fe8b 	bl	80015b4 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
   ldr   r0, =_estack
 80018a0:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 80018a4:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 80018a8:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 80018ac:	08001d70 	.word	0x08001d70
  ldr  r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80018b8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80018bc:	20000078 	.word	0x20000078

080018c0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <DMA1_Channel1_IRQHandler>
	...

080018c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <SystemInit+0x64>)
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <SystemInit+0x64>)
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0049      	lsls	r1, r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SystemInit+0x64>)
 80018d8:	4a13      	ldr	r2, [pc, #76]	; (8001928 <SystemInit+0x64>)
 80018da:	68d2      	ldr	r2, [r2, #12]
 80018dc:	4913      	ldr	r1, [pc, #76]	; (800192c <SystemInit+0x68>)
 80018de:	400a      	ands	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <SystemInit+0x64>)
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <SystemInit+0x64>)
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4911      	ldr	r1, [pc, #68]	; (8001930 <SystemInit+0x6c>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <SystemInit+0x64>)
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <SystemInit+0x64>)
 80018f2:	6892      	ldr	r2, [r2, #8]
 80018f4:	2101      	movs	r1, #1
 80018f6:	438a      	bics	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <SystemInit+0x64>)
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SystemInit+0x64>)
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <SystemInit+0x70>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <SystemInit+0x64>)
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <SystemInit+0x64>)
 800190a:	68d2      	ldr	r2, [r2, #12]
 800190c:	490a      	ldr	r1, [pc, #40]	; (8001938 <SystemInit+0x74>)
 800190e:	400a      	ands	r2, r1
 8001910:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SystemInit+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <SystemInit+0x78>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0512      	lsls	r2, r2, #20
 800191e:	609a      	str	r2, [r3, #8]
#endif
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	40021000 	.word	0x40021000
 800192c:	88ff400c 	.word	0x88ff400c
 8001930:	fef6fff6 	.word	0xfef6fff6
 8001934:	fffbffff 	.word	0xfffbffff
 8001938:	ff02ffff 	.word	0xff02ffff
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	220c      	movs	r2, #12
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b04      	cmp	r3, #4
 8001968:	d018      	beq.n	800199c <SystemCoreClockUpdate+0x5c>
 800196a:	d802      	bhi.n	8001972 <SystemCoreClockUpdate+0x32>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <SystemCoreClockUpdate+0x3c>
 8001970:	e052      	b.n	8001a18 <SystemCoreClockUpdate+0xd8>
 8001972:	2b08      	cmp	r3, #8
 8001974:	d016      	beq.n	80019a4 <SystemCoreClockUpdate+0x64>
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d018      	beq.n	80019ac <SystemCoreClockUpdate+0x6c>
 800197a:	e04d      	b.n	8001a18 <SystemCoreClockUpdate+0xd8>
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0b5b      	lsrs	r3, r3, #13
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	0212      	lsls	r2, r2, #8
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	001a      	movs	r2, r3
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 8001998:	601a      	str	r2, [r3, #0]
      break;
 800199a:	e04d      	b.n	8001a38 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 800199e:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <SystemCoreClockUpdate+0x124>)
 80019a0:	601a      	str	r2, [r3, #0]
      break;
 80019a2:	e049      	b.n	8001a38 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <SystemCoreClockUpdate+0x128>)
 80019a8:	601a      	str	r2, [r3, #0]
      break;
 80019aa:	e045      	b.n	8001a38 <SystemCoreClockUpdate+0xf8>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	23f0      	movs	r3, #240	; 0xf0
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <SystemCoreClockUpdate+0x12c>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0d9b      	lsrs	r3, r3, #22
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	025b      	lsls	r3, r3, #9
 80019de:	4013      	ands	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <SystemCoreClockUpdate+0xc0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <SystemCoreClockUpdate+0x124>)
 80019ec:	4353      	muls	r3, r2
 80019ee:	68f9      	ldr	r1, [r7, #12]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7fe fb89 	bl	8000108 <__udivsi3>
 80019f6:	0003      	movs	r3, r0
 80019f8:	001a      	movs	r2, r3
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 80019fc:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80019fe:	e01b      	b.n	8001a38 <SystemCoreClockUpdate+0xf8>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <SystemCoreClockUpdate+0x128>)
 8001a04:	4353      	muls	r3, r2
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7fe fb7d 	bl	8000108 <__udivsi3>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	001a      	movs	r2, r3
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 8001a14:	601a      	str	r2, [r3, #0]
      break;
 8001a16:	e00f      	b.n	8001a38 <SystemCoreClockUpdate+0xf8>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0b5b      	lsrs	r3, r3, #13
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	001a      	movs	r2, r3
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 8001a34:	601a      	str	r2, [r3, #0]
      break;
 8001a36:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <SystemCoreClockUpdate+0x11c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	220f      	movs	r2, #15
 8001a40:	4013      	ands	r3, r2
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <SystemCoreClockUpdate+0x130>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	40da      	lsrs	r2, r3
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <SystemCoreClockUpdate+0x120>)
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b006      	add	sp, #24
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	08001d5c 	.word	0x08001d5c
 8001a70:	08001d44 	.word	0x08001d44

08001a74 <__libc_init_array>:
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	2600      	movs	r6, #0
 8001a78:	4d0c      	ldr	r5, [pc, #48]	; (8001aac <__libc_init_array+0x38>)
 8001a7a:	4c0d      	ldr	r4, [pc, #52]	; (8001ab0 <__libc_init_array+0x3c>)
 8001a7c:	1b64      	subs	r4, r4, r5
 8001a7e:	10a4      	asrs	r4, r4, #2
 8001a80:	42a6      	cmp	r6, r4
 8001a82:	d109      	bne.n	8001a98 <__libc_init_array+0x24>
 8001a84:	2600      	movs	r6, #0
 8001a86:	f000 f819 	bl	8001abc <_init>
 8001a8a:	4d0a      	ldr	r5, [pc, #40]	; (8001ab4 <__libc_init_array+0x40>)
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <__libc_init_array+0x44>)
 8001a8e:	1b64      	subs	r4, r4, r5
 8001a90:	10a4      	asrs	r4, r4, #2
 8001a92:	42a6      	cmp	r6, r4
 8001a94:	d105      	bne.n	8001aa2 <__libc_init_array+0x2e>
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	00b3      	lsls	r3, r6, #2
 8001a9a:	58eb      	ldr	r3, [r5, r3]
 8001a9c:	4798      	blx	r3
 8001a9e:	3601      	adds	r6, #1
 8001aa0:	e7ee      	b.n	8001a80 <__libc_init_array+0xc>
 8001aa2:	00b3      	lsls	r3, r6, #2
 8001aa4:	58eb      	ldr	r3, [r5, r3]
 8001aa6:	4798      	blx	r3
 8001aa8:	3601      	adds	r6, #1
 8001aaa:	e7f2      	b.n	8001a92 <__libc_init_array+0x1e>
 8001aac:	08001d68 	.word	0x08001d68
 8001ab0:	08001d68 	.word	0x08001d68
 8001ab4:	08001d68 	.word	0x08001d68
 8001ab8:	08001d6c 	.word	0x08001d6c

08001abc <_init>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac2:	bc08      	pop	{r3}
 8001ac4:	469e      	mov	lr, r3
 8001ac6:	4770      	bx	lr

08001ac8 <_fini>:
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ace:	bc08      	pop	{r3}
 8001ad0:	469e      	mov	lr, r3
 8001ad2:	4770      	bx	lr
