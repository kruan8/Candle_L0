
Candle_l0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a7c  08001a7c  00011a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000004c  20000010  08001a90  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000080  2000005c  08001a90  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003822  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b17  00000000  00000000  00023856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004c0  00000000  00000000  00024370  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00024830  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019e8  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001498  00000000  00000000  00026660  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027af8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000fe8  00000000  00000000  00027b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017d0 	.word	0x080017d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080017d0 	.word	0x080017d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <LL_RCC_MSI_GetRange+0x14>)
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	23e0      	movs	r3, #224	; 0xe0
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	4013      	ands	r3, r2
}
 800022e:	0018      	movs	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000

08000238 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_RCC_GetSysClkSource+0x14>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	220c      	movs	r2, #12
 8000242:	4013      	ands	r3, r2
}
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <LL_RCC_GetAHBPrescaler+0x14>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	22f0      	movs	r2, #240	; 0xf0
 800025a:	4013      	ands	r3, r2
}
 800025c:	0018      	movs	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40021000 	.word	0x40021000

08000268 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <LL_RCC_GetAPB1Prescaler+0x14>)
 800026e:	68da      	ldr	r2, [r3, #12]
 8000270:	23e0      	movs	r3, #224	; 0xe0
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	4013      	ands	r3, r2
}
 8000276:	0018      	movs	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40021000 	.word	0x40021000

08000280 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000286:	68da      	ldr	r2, [r3, #12]
 8000288:	23e0      	movs	r3, #224	; 0xe0
 800028a:	019b      	lsls	r3, r3, #6
 800028c:	4013      	ands	r3, r2
}
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000

08000298 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <LL_RCC_PLL_GetMainSource+0x14>)
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	025b      	lsls	r3, r3, #9
 80002a4:	4013      	ands	r3, r2
}
 80002a6:	0018      	movs	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40021000 	.word	0x40021000

080002b0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	23f0      	movs	r3, #240	; 0xf0
 80002ba:	039b      	lsls	r3, r3, #14
 80002bc:	4013      	ands	r3, r2
}
 80002be:	0018      	movs	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000

080002c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <LL_RCC_PLL_GetDivider+0x14>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	23c0      	movs	r3, #192	; 0xc0
 80002d2:	041b      	lsls	r3, r3, #16
 80002d4:	4013      	ands	r3, r2
}
 80002d6:	0018      	movs	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2210      	movs	r2, #16
 80002ea:	4013      	ands	r3, r2
 80002ec:	2b10      	cmp	r3, #16
 80002ee:	d101      	bne.n	80002f4 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80002f0:	2301      	movs	r3, #1
 80002f2:	e000      	b.n	80002f6 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	0018      	movs	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000308:	f000 f820 	bl	800034c <RCC_GetSystemClockFreq>
 800030c:	0002      	movs	r2, r0
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	0018      	movs	r0, r3
 8000318:	f000 f85c 	bl	80003d4 <RCC_GetHCLKClockFreq>
 800031c:	0002      	movs	r2, r0
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	0018      	movs	r0, r3
 8000328:	f000 f86a 	bl	8000400 <RCC_GetPCLK1ClockFreq>
 800032c:	0002      	movs	r2, r0
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	0018      	movs	r0, r3
 8000338:	f000 f876 	bl	8000428 <RCC_GetPCLK2ClockFreq>
 800033c:	0002      	movs	r2, r0
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60da      	str	r2, [r3, #12]
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000352:	f7ff ff71 	bl	8000238 <LL_RCC_GetSysClkSource>
 8000356:	0003      	movs	r3, r0
 8000358:	2b04      	cmp	r3, #4
 800035a:	d013      	beq.n	8000384 <RCC_GetSystemClockFreq+0x38>
 800035c:	d802      	bhi.n	8000364 <RCC_GetSystemClockFreq+0x18>
 800035e:	2b00      	cmp	r3, #0
 8000360:	d005      	beq.n	800036e <RCC_GetSystemClockFreq+0x22>
 8000362:	e021      	b.n	80003a8 <RCC_GetSystemClockFreq+0x5c>
 8000364:	2b08      	cmp	r3, #8
 8000366:	d017      	beq.n	8000398 <RCC_GetSystemClockFreq+0x4c>
 8000368:	2b0c      	cmp	r3, #12
 800036a:	d018      	beq.n	800039e <RCC_GetSystemClockFreq+0x52>
 800036c:	e01c      	b.n	80003a8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800036e:	f7ff ff57 	bl	8000220 <LL_RCC_MSI_GetRange>
 8000372:	0003      	movs	r3, r0
 8000374:	0b5b      	lsrs	r3, r3, #13
 8000376:	3301      	adds	r3, #1
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0212      	lsls	r2, r2, #8
 800037c:	409a      	lsls	r2, r3
 800037e:	0013      	movs	r3, r2
 8000380:	607b      	str	r3, [r7, #4]
      break;
 8000382:	e01c      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000384:	f7ff ffac 	bl	80002e0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d002      	beq.n	8000392 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <RCC_GetSystemClockFreq+0x7c>)
 800038e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000390:	e015      	b.n	80003be <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <RCC_GetSystemClockFreq+0x80>)
 8000394:	607b      	str	r3, [r7, #4]
      break;
 8000396:	e012      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <RCC_GetSystemClockFreq+0x84>)
 800039a:	607b      	str	r3, [r7, #4]
      break;
 800039c:	e00f      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800039e:	f000 f857 	bl	8000450 <RCC_PLL_GetFreqDomain_SYS>
 80003a2:	0003      	movs	r3, r0
 80003a4:	607b      	str	r3, [r7, #4]
      break;
 80003a6:	e00a      	b.n	80003be <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80003a8:	f7ff ff3a 	bl	8000220 <LL_RCC_MSI_GetRange>
 80003ac:	0003      	movs	r3, r0
 80003ae:	0b5b      	lsrs	r3, r3, #13
 80003b0:	3301      	adds	r3, #1
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	0212      	lsls	r2, r2, #8
 80003b6:	409a      	lsls	r2, r3
 80003b8:	0013      	movs	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
      break;
 80003bc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80003be:	687b      	ldr	r3, [r7, #4]
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	003d0900 	.word	0x003d0900
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	007a1200 	.word	0x007a1200

080003d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80003dc:	f7ff ff38 	bl	8000250 <LL_RCC_GetAHBPrescaler>
 80003e0:	0003      	movs	r3, r0
 80003e2:	091b      	lsrs	r3, r3, #4
 80003e4:	220f      	movs	r2, #15
 80003e6:	4013      	ands	r3, r2
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <RCC_GetHCLKClockFreq+0x28>)
 80003ea:	5cd3      	ldrb	r3, [r2, r3]
 80003ec:	001a      	movs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	40d3      	lsrs	r3, r2
}
 80003f2:	0018      	movs	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	08001a58 	.word	0x08001a58

08000400 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000408:	f7ff ff2e 	bl	8000268 <LL_RCC_GetAPB1Prescaler>
 800040c:	0003      	movs	r3, r0
 800040e:	0a1b      	lsrs	r3, r3, #8
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <RCC_GetPCLK1ClockFreq+0x24>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	001a      	movs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	40d3      	lsrs	r3, r2
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	08001a68 	.word	0x08001a68

08000428 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000430:	f7ff ff26 	bl	8000280 <LL_RCC_GetAPB2Prescaler>
 8000434:	0003      	movs	r3, r0
 8000436:	0adb      	lsrs	r3, r3, #11
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <RCC_GetPCLK2ClockFreq+0x24>)
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	001a      	movs	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	40d3      	lsrs	r3, r2
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	08001a68 	.word	0x08001a68

08000450 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000456:	f7ff ff1f 	bl	8000298 <LL_RCC_PLL_GetMainSource>
 800045a:	0003      	movs	r3, r0
 800045c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d109      	bne.n	8000478 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000464:	f7ff ff3c 	bl	80002e0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d002      	beq.n	8000472 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800046e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000470:	e005      	b.n	800047e <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000474:	607b      	str	r3, [r7, #4]
      break;
 8000476:	e002      	b.n	800047e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800047a:	607b      	str	r3, [r7, #4]
      break;
 800047c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800047e:	f7ff ff17 	bl	80002b0 <LL_RCC_PLL_GetMultiplicator>
 8000482:	0003      	movs	r3, r0
 8000484:	0c9b      	lsrs	r3, r3, #18
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000488:	5cd3      	ldrb	r3, [r2, r3]
 800048a:	001a      	movs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4353      	muls	r3, r2
 8000490:	001c      	movs	r4, r3
 8000492:	f7ff ff19 	bl	80002c8 <LL_RCC_PLL_GetDivider>
 8000496:	0003      	movs	r3, r0
 8000498:	0d9b      	lsrs	r3, r3, #22
 800049a:	3301      	adds	r3, #1
 800049c:	0019      	movs	r1, r3
 800049e:	0020      	movs	r0, r4
 80004a0:	f7ff fe32 	bl	8000108 <__udivsi3>
 80004a4:	0003      	movs	r3, r0
}
 80004a6:	0018      	movs	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b003      	add	sp, #12
 80004ac:	bd90      	pop	{r4, r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	003d0900 	.word	0x003d0900
 80004b4:	00f42400 	.word	0x00f42400
 80004b8:	007a1200 	.word	0x007a1200
 80004bc:	08001a70 	.word	0x08001a70

080004c0 <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_RELOAD);
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <LL_IWDG_ReloadCounter+0x18>)
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <LL_IWDG_ReloadCounter+0x1c>)
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40003000 	.word	0x40003000
 80004dc:	0000aaaa 	.word	0x0000aaaa

080004e0 <App_Init>:
void _FrameControl(void);
void _Sleep(void);
uint32_t _GetTrueRandomNumber(void);

void App_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
#ifdef DEBUG
  RCC->APB2ENR |= RCC_APB2ENR_DBGMCUEN;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <App_Init+0x30>)
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <App_Init+0x30>)
 80004e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	03c9      	lsls	r1, r1, #15
 80004ee:	430a      	orrs	r2, r1
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
#endif

  HW_Init();
 80004f2:	f000 fd0b 	bl	8000f0c <HW_Init>
  HW_SetTimCallback(App_TimCallback);
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <App_Init+0x34>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fe89 	bl	8001210 <HW_SetTimCallback>

  g_nBatCtrlTime = 0;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <App_Init+0x38>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
  g_bInitializated = false;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <App_Init+0x3c>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	080006a1 	.word	0x080006a1
 8000518:	2000002c 	.word	0x2000002c
 800051c:	20000034 	.word	0x20000034

08000520 <App_Exec>:

void App_Exec(void)
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
   // SLEPP mod, wake up from PWM or Systick
  _Sleep();
 8000526:	f000 f8b5 	bl	8000694 <_Sleep>

  if (Timer_GetTicks_ms() >= g_nBatCtrlTime)
 800052a:	f000 ffdb 	bl	80014e4 <Timer_GetTicks_ms>
 800052e:	0002      	movs	r2, r0
 8000530:	000b      	movs	r3, r1
 8000532:	4932      	ldr	r1, [pc, #200]	; (80005fc <App_Exec+0xdc>)
 8000534:	6809      	ldr	r1, [r1, #0]
 8000536:	6039      	str	r1, [r7, #0]
 8000538:	2100      	movs	r1, #0
 800053a:	6079      	str	r1, [r7, #4]
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	4299      	cmp	r1, r3
 8000540:	d819      	bhi.n	8000576 <App_Exec+0x56>
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	4299      	cmp	r1, r3
 8000546:	d102      	bne.n	800054e <App_Exec+0x2e>
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	4291      	cmp	r1, r2
 800054c:	d813      	bhi.n	8000576 <App_Exec+0x56>
  {
    g_nBatCtrlTime = Timer_GetTicks_ms() + APP_MEASURE_BAT_CTRL_MS;
 800054e:	f000 ffc9 	bl	80014e4 <Timer_GetTicks_ms>
 8000552:	0003      	movs	r3, r0
 8000554:	000c      	movs	r4, r1
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <App_Exec+0xe0>)
 8000558:	189a      	adds	r2, r3, r2
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <App_Exec+0xdc>)
 800055c:	601a      	str	r2, [r3, #0]
    g_nMeasureTime = Timer_GetTicks_ms() + APP_MEASURE_OFFSET_MS;
 800055e:	f000 ffc1 	bl	80014e4 <Timer_GetTicks_ms>
 8000562:	0003      	movs	r3, r0
 8000564:	000c      	movs	r4, r1
 8000566:	3364      	adds	r3, #100	; 0x64
 8000568:	001a      	movs	r2, r3
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <App_Exec+0xe4>)
 800056c:	601a      	str	r2, [r3, #0]
    HW_BatVoltageCtrl(true);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 fe37 	bl	80011e2 <HW_BatVoltageCtrl>
 8000574:	e017      	b.n	80005a6 <App_Exec+0x86>
  }
  else if (Timer_GetTicks_ms() >= g_nMeasureTime)
 8000576:	f000 ffb5 	bl	80014e4 <Timer_GetTicks_ms>
 800057a:	0002      	movs	r2, r0
 800057c:	000b      	movs	r3, r1
 800057e:	4921      	ldr	r1, [pc, #132]	; (8000604 <App_Exec+0xe4>)
 8000580:	6809      	ldr	r1, [r1, #0]
 8000582:	000c      	movs	r4, r1
 8000584:	2100      	movs	r1, #0
 8000586:	000d      	movs	r5, r1
 8000588:	429d      	cmp	r5, r3
 800058a:	d80c      	bhi.n	80005a6 <App_Exec+0x86>
 800058c:	d101      	bne.n	8000592 <App_Exec+0x72>
 800058e:	4294      	cmp	r4, r2
 8000590:	d809      	bhi.n	80005a6 <App_Exec+0x86>
  {
    g_nMeasureTime = Timer_GetTicks_ms() + APP_MEASURE_BAT_CTRL_MS;
 8000592:	f000 ffa7 	bl	80014e4 <Timer_GetTicks_ms>
 8000596:	0003      	movs	r3, r0
 8000598:	000c      	movs	r4, r1
 800059a:	4a19      	ldr	r2, [pc, #100]	; (8000600 <App_Exec+0xe0>)
 800059c:	189a      	adds	r2, r3, r2
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <App_Exec+0xe4>)
 80005a0:	601a      	str	r2, [r3, #0]
    HW_StartAdc();
 80005a2:	f000 fd55 	bl	8001050 <HW_StartAdc>
  }

  if (HW_IsAdcConverted())
 80005a6:	f000 fe8f 	bl	80012c8 <HW_IsAdcConverted>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d01d      	beq.n	80005ea <App_Exec+0xca>
  {
    if (HW_GetBatVoltage() < APP_BATT_MIN_MV || HW_GetOptoVoltage() > APP_OPTO_MIN_MV)
 80005ae:	f000 fe3d 	bl	800122c <HW_GetBatVoltage>
 80005b2:	0002      	movs	r2, r0
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <App_Exec+0xe8>)
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d906      	bls.n	80005c8 <App_Exec+0xa8>
 80005ba:	f000 fe41 	bl	8001240 <HW_GetOptoVoltage>
 80005be:	0002      	movs	r2, r0
 80005c0:	23fa      	movs	r3, #250	; 0xfa
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d902      	bls.n	80005ce <App_Exec+0xae>
    {
      HW_PwmOff();
 80005c8:	f000 fdfb 	bl	80011c2 <HW_PwmOff>
      // standby/stop
      while(1);
 80005cc:	e7fe      	b.n	80005cc <App_Exec+0xac>
      LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
    }

    HW_ResetAdcConverted();
 80005ce:	f000 fe85 	bl	80012dc <HW_ResetAdcConverted>
    if (!g_bInitializated)
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <App_Exec+0xec>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4053      	eors	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <App_Exec+0xca>
    {
      g_bInitializated = true;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <App_Exec+0xec>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
      HW_PwmOn();
 80005e6:	f000 fde1 	bl	80011ac <HW_PwmOn>
    }
  }

  LL_IWDG_ReloadCounter(IWDG);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <App_Exec+0xf0>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff67 	bl	80004c0 <LL_IWDG_ReloadCounter>
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bdb0      	pop	{r4, r5, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	00002710 	.word	0x00002710
 8000604:	20000030 	.word	0x20000030
 8000608:	00000c7f 	.word	0x00000c7f
 800060c:	20000034 	.word	0x20000034
 8000610:	40003000 	.word	0x40003000

08000614 <_FrameControl>:

void _FrameControl(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  static uint16_t nDataIndex = 0;        // index to data array
  static uint32_t nNibble = 0;

  uint8_t nValue;
  if (nNibble & 0x01)
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <_FrameControl+0x74>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	d01a      	beq.n	800065a <_FrameControl+0x46>
  {
    nValue = g_arrData[nDataIndex] & 0x0F;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <_FrameControl+0x78>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	001a      	movs	r2, r3
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <_FrameControl+0x7c>)
 800062c:	5c9a      	ldrb	r2, [r3, r2]
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	210f      	movs	r1, #15
 8000632:	400a      	ands	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
    nDataIndex++;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_FrameControl+0x78>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <_FrameControl+0x78>)
 8000640:	801a      	strh	r2, [r3, #0]
    nDataIndex %= sizeof (g_arrData);
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <_FrameControl+0x78>)
 8000644:	881a      	ldrh	r2, [r3, #0]
 8000646:	2396      	movs	r3, #150	; 0x96
 8000648:	0099      	lsls	r1, r3, #2
 800064a:	0010      	movs	r0, r2
 800064c:	f7ff fde2 	bl	8000214 <__aeabi_uidivmod>
 8000650:	000b      	movs	r3, r1
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <_FrameControl+0x78>)
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	e007      	b.n	800066a <_FrameControl+0x56>
  }
  else
  {
    nValue = g_arrData[nDataIndex] >> 4;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <_FrameControl+0x78>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	001a      	movs	r2, r3
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <_FrameControl+0x7c>)
 8000662:	5c9a      	ldrb	r2, [r3, r2]
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	0912      	lsrs	r2, r2, #4
 8000668:	701a      	strb	r2, [r3, #0]
  }

  HW_PwmSet(nValue);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fd89 	bl	8001188 <HW_PwmSet>
  nNibble++;
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <_FrameControl+0x74>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <_FrameControl+0x74>)
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000038 	.word	0x20000038
 800068c:	2000003c 	.word	0x2000003c
 8000690:	080017e8 	.word	0x080017e8

08000694 <_Sleep>:

void _Sleep(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000698:	bf30      	wfi
//  APP_SYSTICK_ISR_OFF;
  __WFI();
//  APP_SYSTICK_ISR_ON;
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <App_TimCallback>:

  APP_SYSTICK_ISR_ON;
}

void App_TimCallback(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  g_FrameCounter++;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <App_TimCallback+0x38>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <App_TimCallback+0x38>)
 80006ae:	701a      	strb	r2, [r3, #0]
  g_FrameCounter %= 0xF;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <App_TimCallback+0x38>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	210f      	movs	r1, #15
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff fdac 	bl	8000214 <__aeabi_uidivmod>
 80006bc:	000b      	movs	r3, r1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <App_TimCallback+0x38>)
 80006c2:	701a      	strb	r2, [r3, #0]
  if (g_FrameCounter == 0)
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <App_TimCallback+0x38>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d101      	bne.n	80006d0 <App_TimCallback+0x30>
  {
    _FrameControl();
 80006cc:	f7ff ffa2 	bl	8000614 <_FrameControl>
  }

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000035 	.word	0x20000035

080006dc <GPIO_SetAFpin>:
{
  return (1 << (ePortPin & 0x0F));
}

void GPIO_SetAFpin(gpio_pins_e ePortPin, uint8_t nAF)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
  uint32_t nPin = ePortPin & 0xF;
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	220f      	movs	r2, #15
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
  if (nPin < 8)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d822      	bhi.n	8000744 <GPIO_SetAFpin+0x68>
  {
    MODIFY_REG(GET_PORT(ePortPin)->AFR[0], GPIO_AFRL_AFSEL0 << (nPin << 2), nAF << (nPin << 2));
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	091b      	lsrs	r3, r3, #4
 8000704:	b2db      	uxtb	r3, r3
 8000706:	22a0      	movs	r2, #160	; 0xa0
 8000708:	0352      	lsls	r2, r2, #13
 800070a:	4694      	mov	ip, r2
 800070c:	4463      	add	r3, ip
 800070e:	029b      	lsls	r3, r3, #10
 8000710:	1dfa      	adds	r2, r7, #7
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	0912      	lsrs	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	21a0      	movs	r1, #160	; 0xa0
 800071a:	0349      	lsls	r1, r1, #13
 800071c:	468c      	mov	ip, r1
 800071e:	4462      	add	r2, ip
 8000720:	0292      	lsls	r2, r2, #10
 8000722:	6a12      	ldr	r2, [r2, #32]
 8000724:	68f9      	ldr	r1, [r7, #12]
 8000726:	0089      	lsls	r1, r1, #2
 8000728:	200f      	movs	r0, #15
 800072a:	4088      	lsls	r0, r1
 800072c:	0001      	movs	r1, r0
 800072e:	43c9      	mvns	r1, r1
 8000730:	400a      	ands	r2, r1
 8000732:	1db9      	adds	r1, r7, #6
 8000734:	7808      	ldrb	r0, [r1, #0]
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	0089      	lsls	r1, r1, #2
 800073a:	4088      	lsls	r0, r1
 800073c:	0001      	movs	r1, r0
 800073e:	430a      	orrs	r2, r1
 8000740:	621a      	str	r2, [r3, #32]
  else
  {
    nPin -= 8;
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
  }
}
 8000742:	e024      	b.n	800078e <GPIO_SetAFpin+0xb2>
    nPin -= 8;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3b08      	subs	r3, #8
 8000748:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(GET_PORT(ePortPin)->AFR[1], GPIO_AFRH_AFSEL8 << (nPin << 2), nAF << (nPin << 2));
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	22a0      	movs	r2, #160	; 0xa0
 8000754:	0352      	lsls	r2, r2, #13
 8000756:	4694      	mov	ip, r2
 8000758:	4463      	add	r3, ip
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	1dfa      	adds	r2, r7, #7
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	0912      	lsrs	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	21a0      	movs	r1, #160	; 0xa0
 8000766:	0349      	lsls	r1, r1, #13
 8000768:	468c      	mov	ip, r1
 800076a:	4462      	add	r2, ip
 800076c:	0292      	lsls	r2, r2, #10
 800076e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	0089      	lsls	r1, r1, #2
 8000774:	200f      	movs	r0, #15
 8000776:	4088      	lsls	r0, r1
 8000778:	0001      	movs	r1, r0
 800077a:	43c9      	mvns	r1, r1
 800077c:	400a      	ands	r2, r1
 800077e:	1db9      	adds	r1, r7, #6
 8000780:	7808      	ldrb	r0, [r1, #0]
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	4088      	lsls	r0, r1
 8000788:	0001      	movs	r1, r0
 800078a:	430a      	orrs	r2, r1
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b004      	add	sp, #16
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <NVIC_EnableIRQ+0x28>)
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	221f      	movs	r2, #31
 80007ae:	400a      	ands	r2, r1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4091      	lsls	r1, r2
 80007b4:	000a      	movs	r2, r1
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b7f      	cmp	r3, #127	; 0x7f
 80007d8:	d932      	bls.n	8000840 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80007da:	4c2f      	ldr	r4, [pc, #188]	; (8000898 <NVIC_SetPriority+0xd4>)
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	001a      	movs	r2, r3
 80007e2:	230f      	movs	r3, #15
 80007e4:	4013      	ands	r3, r2
 80007e6:	3b08      	subs	r3, #8
 80007e8:	0899      	lsrs	r1, r3, #2
 80007ea:	4a2b      	ldr	r2, [pc, #172]	; (8000898 <NVIC_SetPriority+0xd4>)
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	0018      	movs	r0, r3
 80007f2:	230f      	movs	r3, #15
 80007f4:	4003      	ands	r3, r0
 80007f6:	3b08      	subs	r3, #8
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	3306      	adds	r3, #6
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	18d3      	adds	r3, r2, r3
 8000800:	3304      	adds	r3, #4
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1dfa      	adds	r2, r7, #7
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	0010      	movs	r0, r2
 800080a:	2203      	movs	r2, #3
 800080c:	4002      	ands	r2, r0
 800080e:	00d2      	lsls	r2, r2, #3
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	4090      	lsls	r0, r2
 8000814:	0002      	movs	r2, r0
 8000816:	43d2      	mvns	r2, r2
 8000818:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	20ff      	movs	r0, #255	; 0xff
 8000820:	4018      	ands	r0, r3
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	001d      	movs	r5, r3
 8000828:	2303      	movs	r3, #3
 800082a:	402b      	ands	r3, r5
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	4098      	lsls	r0, r3
 8000830:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000832:	431a      	orrs	r2, r3
 8000834:	1d8b      	adds	r3, r1, #6
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	18e3      	adds	r3, r4, r3
 800083a:	3304      	adds	r3, #4
 800083c:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800083e:	e027      	b.n	8000890 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000840:	4c16      	ldr	r4, [pc, #88]	; (800089c <NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	4914      	ldr	r1, [pc, #80]	; (800089c <NVIC_SetPriority+0xd8>)
 800084c:	1dfa      	adds	r2, r7, #7
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	b252      	sxtb	r2, r2
 8000852:	0892      	lsrs	r2, r2, #2
 8000854:	32c0      	adds	r2, #192	; 0xc0
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	5852      	ldr	r2, [r2, r1]
 800085a:	1df9      	adds	r1, r7, #7
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	0008      	movs	r0, r1
 8000860:	2103      	movs	r1, #3
 8000862:	4001      	ands	r1, r0
 8000864:	00c9      	lsls	r1, r1, #3
 8000866:	20ff      	movs	r0, #255	; 0xff
 8000868:	4088      	lsls	r0, r1
 800086a:	0001      	movs	r1, r0
 800086c:	43c9      	mvns	r1, r1
 800086e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	20ff      	movs	r0, #255	; 0xff
 8000876:	4010      	ands	r0, r2
 8000878:	1dfa      	adds	r2, r7, #7
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	0015      	movs	r5, r2
 800087e:	2203      	movs	r2, #3
 8000880:	402a      	ands	r2, r5
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	4090      	lsls	r0, r2
 8000886:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000888:	430a      	orrs	r2, r1
 800088a:	33c0      	adds	r3, #192	; 0xc0
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	511a      	str	r2, [r3, r4]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bdb0      	pop	{r4, r5, r7, pc}
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	e000e100 	.word	0xe000e100

080008a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80008ac:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80008b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4013      	ands	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80008d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	430a      	orrs	r2, r1
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80008e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b004      	add	sp, #16
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <LL_IOP_GRP1_EnableClock+0x28>)
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <LL_IOP_GRP1_EnableClock+0x28>)
 8000904:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	430a      	orrs	r2, r1
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <LL_IOP_GRP1_EnableClock+0x28>)
 800090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4013      	ands	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b004      	add	sp, #16
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZ, Periphs);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x1c>)
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x1c>)
 8000930:	6891      	ldr	r1, [r2, #8]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	430a      	orrs	r2, r1
 8000936:	609a      	str	r2, [r3, #8]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40015800 	.word	0x40015800

08000944 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	435a      	muls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	189b      	adds	r3, r3, r2
 8000960:	43db      	mvns	r3, r3
 8000962:	400b      	ands	r3, r1
 8000964:	001a      	movs	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	434b      	muls	r3, r1
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	434b      	muls	r3, r1
 8000970:	431a      	orrs	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	601a      	str	r2, [r3, #0]
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}

0800097e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	434b      	muls	r3, r1
 800099a:	431a      	orrs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	605a      	str	r2, [r3, #4]
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	68d9      	ldr	r1, [r3, #12]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	435a      	muls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	43db      	mvns	r3, r3
 80009c6:	400b      	ands	r3, r1
 80009c8:	001a      	movs	r2, r3
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	434b      	muls	r3, r1
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	434b      	muls	r3, r1
 80009d4:	431a      	orrs	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	60da      	str	r2, [r3, #12]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <LL_ADC_SetCommonFrequencyMode+0x24>)
 80009f4:	401a      	ands	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	fdffffff 	.word	0xfdffffff

08000a0c <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	ff3fffff 	.word	0xff3fffff

08000a34 <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	089a      	lsrs	r2, r3, #2
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	611a      	str	r2, [r3, #16]
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <LL_ADC_SetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	2218      	movs	r2, #24
 8000a66:	4393      	bics	r3, r2
 8000a68:	001a      	movs	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60da      	str	r2, [r3, #12]
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <LL_ADC_SetLowPowerMode>:
  *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
  *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF), LowPowerMode);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <LL_ADC_SetLowPowerMode+0x24>)
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60da      	str	r2, [r3, #12]
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	ffff3fff 	.word	0xffff3fff

08000aa4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	4393      	bics	r3, r2
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LL_ADC_REG_SetSequencerChannels>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	035b      	lsls	r3, r3, #13
 8000ad6:	0b5a      	lsrs	r2, r3, #13
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4393      	bics	r3, r2
 8000af6:	001a      	movs	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	611a      	str	r2, [r3, #16]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LL_ADC_ConfigOverSamplingRatioShift>:
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <LL_ADC_ConfigOverSamplingRatioShift+0x28>)
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	430b      	orrs	r3, r1
 8000b22:	431a      	orrs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	611a      	str	r2, [r3, #16]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	fffffe03 	.word	0xfffffe03

08000b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <LL_ADC_Enable+0x20>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	2201      	movs	r2, #1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	7fffffe8 	.word	0x7fffffe8

08000b58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <LL_ADC_REG_StartConversion+0x20>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	2204      	movs	r2, #4
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	7fffffe8 	.word	0x7fffffe8

08000b7c <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	b2db      	uxtb	r3, r3
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	605a      	str	r2, [r3, #4]
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}

08000bae <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4393      	bics	r3, r2
 8000bda:	001a      	movs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1a      	ldr	r2, [r3, #32]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	621a      	str	r2, [r3, #32]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	43d2      	mvns	r2, r2
 8000c48:	401a      	ands	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	621a      	str	r2, [r3, #32]
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d00d      	beq.n	8000c86 <LL_TIM_OC_SetMode+0x2e>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d008      	beq.n	8000c82 <LL_TIM_OC_SetMode+0x2a>
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d101      	bne.n	8000c7e <LL_TIM_OC_SetMode+0x26>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e004      	b.n	8000c88 <LL_TIM_OC_SetMode+0x30>
 8000c7e:	2306      	movs	r3, #6
 8000c80:	e002      	b.n	8000c88 <LL_TIM_OC_SetMode+0x30>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e000      	b.n	8000c88 <LL_TIM_OC_SetMode+0x30>
 8000c86:	2300      	movs	r3, #0
 8000c88:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3318      	adds	r3, #24
 8000c8e:	001a      	movs	r2, r3
 8000c90:	0029      	movs	r1, r5
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LL_TIM_OC_SetMode+0x6c>)
 8000c94:	5c5b      	ldrb	r3, [r3, r1]
 8000c96:	18d3      	adds	r3, r2, r3
 8000c98:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	0029      	movs	r1, r5
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LL_TIM_OC_SetMode+0x70>)
 8000ca0:	5c52      	ldrb	r2, [r2, r1]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2273      	movs	r2, #115	; 0x73
 8000ca6:	408a      	lsls	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	0029      	movs	r1, r5
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LL_TIM_OC_SetMode+0x70>)
 8000cb0:	5c5b      	ldrb	r3, [r3, r1]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	408b      	lsls	r3, r1
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	6023      	str	r3, [r4, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b004      	add	sp, #16
 8000cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc4:	08001a40 	.word	0x08001a40
 8000cc8:	08001a48 	.word	0x08001a48

08000ccc <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d00d      	beq.n	8000cfa <LL_TIM_OC_SetPolarity+0x2e>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b10      	cmp	r3, #16
 8000ce2:	d008      	beq.n	8000cf6 <LL_TIM_OC_SetPolarity+0x2a>
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d101      	bne.n	8000cf2 <LL_TIM_OC_SetPolarity+0x26>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e004      	b.n	8000cfc <LL_TIM_OC_SetPolarity+0x30>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e002      	b.n	8000cfc <LL_TIM_OC_SetPolarity+0x30>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e000      	b.n	8000cfc <LL_TIM_OC_SetPolarity+0x30>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	001c      	movs	r4, r3
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	0021      	movs	r1, r4
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <LL_TIM_OC_SetPolarity+0x60>)
 8000d06:	5c52      	ldrb	r2, [r2, r1]
 8000d08:	0011      	movs	r1, r2
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	408a      	lsls	r2, r1
 8000d0e:	43d2      	mvns	r2, r2
 8000d10:	401a      	ands	r2, r3
 8000d12:	0021      	movs	r1, r4
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <LL_TIM_OC_SetPolarity+0x60>)
 8000d16:	5c5b      	ldrb	r3, [r3, r1]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	621a      	str	r2, [r3, #32]
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b005      	add	sp, #20
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	08001a50 	.word	0x08001a50

08000d30 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00d      	beq.n	8000d5c <LL_TIM_OC_EnablePreload+0x2c>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b10      	cmp	r3, #16
 8000d44:	d008      	beq.n	8000d58 <LL_TIM_OC_EnablePreload+0x28>
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d101      	bne.n	8000d54 <LL_TIM_OC_EnablePreload+0x24>
 8000d50:	2304      	movs	r3, #4
 8000d52:	e004      	b.n	8000d5e <LL_TIM_OC_EnablePreload+0x2e>
 8000d54:	2306      	movs	r3, #6
 8000d56:	e002      	b.n	8000d5e <LL_TIM_OC_EnablePreload+0x2e>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e000      	b.n	8000d5e <LL_TIM_OC_EnablePreload+0x2e>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3318      	adds	r3, #24
 8000d64:	001a      	movs	r2, r3
 8000d66:	0029      	movs	r1, r5
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <LL_TIM_OC_EnablePreload+0x5c>)
 8000d6a:	5c5b      	ldrb	r3, [r3, r1]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000d70:	6822      	ldr	r2, [r4, #0]
 8000d72:	0029      	movs	r1, r5
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <LL_TIM_OC_EnablePreload+0x60>)
 8000d76:	5c5b      	ldrb	r3, [r3, r1]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	6023      	str	r3, [r4, #0]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	08001a40 	.word	0x08001a40
 8000d90:	08001a48 	.word	0x08001a48

08000d94 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	615a      	str	r2, [r3, #20]
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LL_RCC_MSI_SetRange>:
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <LL_RCC_MSI_SetRange+0x20>)
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <LL_RCC_MSI_SetRange+0x20>)
 8000df0:	6852      	ldr	r2, [r2, #4]
 8000df2:	4905      	ldr	r1, [pc, #20]	; (8000e08 <LL_RCC_MSI_SetRange+0x24>)
 8000df4:	4011      	ands	r1, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	ffff1fff 	.word	0xffff1fff

08000e0c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <LL_PWR_SetRegulVoltageScaling+0x20>)
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <LL_PWR_SetRegulVoltageScaling+0x20>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e1c:	4011      	ands	r1, r2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40007000 	.word	0x40007000
 8000e30:	ffffe7ff 	.word	0xffffe7ff

08000e34 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	4013      	ands	r3, r2
 8000e40:	3b10      	subs	r3, #16
 8000e42:	425a      	negs	r2, r3
 8000e44:	4153      	adcs	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	40007000 	.word	0x40007000

08000e54 <LL_IWDG_Enable>:
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_ENABLE);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_IWDG_Enable+0x18>)
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <LL_IWDG_Enable+0x1c>)
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40003000 	.word	0x40003000
 8000e70:	0000cccc 	.word	0x0000cccc

08000e74 <LL_IWDG_ReloadCounter>:
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_RELOAD);
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <LL_IWDG_ReloadCounter+0x18>)
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <LL_IWDG_ReloadCounter+0x1c>)
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40003000 	.word	0x40003000
 8000e90:	0000aaaa 	.word	0x0000aaaa

08000e94 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <LL_IWDG_EnableWriteAccess+0x18>)
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <LL_IWDG_EnableWriteAccess+0x1c>)
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40003000 	.word	0x40003000
 8000eb0:	00005555 	.word	0x00005555

08000eb4 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	605a      	str	r2, [r3, #4]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	051b      	lsls	r3, r3, #20
 8000ede:	0d1a      	lsrs	r2, r3, #20
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4013      	ands	r3, r2
 8000efc:	425a      	negs	r2, r3
 8000efe:	4153      	adcs	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HW_Init>:
void _Gpio_Init(void);
void _PwmInit(void);
void _CalculateAdcVoltage(void);

void HW_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  // Change MSI frequency to 1 MHz
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_4);   // 1 MHz
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff65 	bl	8000de4 <LL_RCC_MSI_SetRange>

  // set voltage range 3
  while (LL_PWR_IsActiveFlag_VOS());
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	f7ff ff8a 	bl	8000e34 <LL_PWR_IsActiveFlag_VOS>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d1fb      	bne.n	8000f1c <HW_Init+0x10>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000f24:	23c0      	movs	r3, #192	; 0xc0
 8000f26:	015b      	lsls	r3, r3, #5
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff6f 	bl	8000e0c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS());
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	f7ff ff80 	bl	8000e34 <LL_PWR_IsActiveFlag_VOS>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d1fb      	bne.n	8000f30 <HW_Init+0x24>

  Timer_Init();
 8000f38:	f000 faba 	bl	80014b0 <Timer_Init>
  _Gpio_Init();
 8000f3c:	f000 f898 	bl	8001070 <_Gpio_Init>
  _AD_Init();
 8000f40:	f000 f828 	bl	8000f94 <_AD_Init>
  _PwmInit();
 8000f44:	f000 f8ca 	bl	80010dc <_PwmInit>

  LL_IWDG_EnableWriteAccess(IWDG);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HW_Init+0x80>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ffa2 	bl	8000e94 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HW_Init+0x80>)
 8000f52:	2106      	movs	r1, #6
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffad 	bl	8000eb4 <LL_IWDG_SetPrescaler>
  LL_IWDG_Enable(IWDG);
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HW_Init+0x80>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff ff79 	bl	8000e54 <LL_IWDG_Enable>
  LL_IWDG_SetReloadCounter(IWDG, 0xFFF);  // cca 32s
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HW_Init+0x84>)
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HW_Init+0x80>)
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff ffb1 	bl	8000ed0 <LL_IWDG_SetReloadCounter>

  while(!LL_IWDG_IsReady(IWDG))
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HW_Init+0x80>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff ffba 	bl	8000eec <LL_IWDG_IsReady>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d0f9      	beq.n	8000f70 <HW_Init+0x64>
  {
  /* add time out here for a robust application */
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HW_Init+0x80>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff78 	bl	8000e74 <LL_IWDG_ReloadCounter>

}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40003000 	.word	0x40003000
 8000f90:	00000fff 	.word	0x00000fff

08000f94 <_AD_Init>:

void _AD_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  // Configure ADC INPUT pins as analog input
   // asi neni treba konfigurovat, po resetu jsou vstupy v analog input
   RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <_AD_Init+0xac>)
 8000f9a:	4a29      	ldr	r2, [pc, #164]	; (8001040 <_AD_Init+0xac>)
 8000f9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
   //  GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODE4)) | GPIO_MODER_MODE4;

   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fc8f 	bl	80008cc <LL_APB2_GRP1_EnableClock>

   // ADC clock PCLK/2 (Synchronous clock mode) (ADC clock = 1MHz)
   LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_SYNC_PCLK_DIV2);
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <_AD_Init+0xb0>)
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	f7ff fd3c 	bl	8000a34 <LL_ADC_SetClock>

   LL_ADC_SetCommonFrequencyMode(ADC1_COMMON, LL_ADC_CLOCK_FREQ_MODE_LOW);
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	049b      	lsls	r3, r3, #18
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <_AD_Init+0xb4>)
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	0010      	movs	r0, r2
 8000fc6:	f7ff fd0d 	bl	80009e4 <LL_ADC_SetCommonFrequencyMode>
   LL_ADC_SetResolution(ADC1, LL_ADC_RESOLUTION_8B);
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <_AD_Init+0xb0>)
 8000fcc:	2110      	movs	r1, #16
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff fd41 	bl	8000a56 <LL_ADC_SetResolution>
   LL_ADC_SetLowPowerMode(ADC1, LL_ADC_LP_AUTOPOWEROFF);
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <_AD_Init+0xb0>)
 8000fda:	0019      	movs	r1, r3
 8000fdc:	0010      	movs	r0, r2
 8000fde:	f7ff fd4d 	bl	8000a7c <LL_ADC_SetLowPowerMode>

   // set oversampling, ! bity CKMODE registru CFGR2 musi byt nastaveny pred jakymkoliv nastaveni ADC - viz datasheet !
   LL_ADC_ConfigOverSamplingRatioShift(ADC1, LL_ADC_OVS_RATIO_16, LL_ADC_OVS_SHIFT_RIGHT_4);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <_AD_Init+0xb0>)
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	210c      	movs	r1, #12
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff fd8d 	bl	8000b08 <LL_ADC_ConfigOverSamplingRatioShift>
   LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_GRP_REGULAR_CONTINUED);
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_AD_Init+0xb0>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff fd76 	bl	8000ae4 <LL_ADC_SetOverSamplingScope>

   LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <_AD_Init+0xb0>)
 8000ffa:	2107      	movs	r1, #7
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fd51 	bl	8000aa4 <LL_ADC_SetSamplingTimeCommonChannels>
//   {
//     /* For robust implementation, add here time-out management */
//   }
//

   LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_VREFINT);
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	03db      	lsls	r3, r3, #15
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <_AD_Init+0xb4>)
 8001008:	0019      	movs	r1, r3
 800100a:	0010      	movs	r0, r2
 800100c:	f7ff fcfe 	bl	8000a0c <LL_ADC_SetCommonPathInternalCh>
   LL_ADC_REG_SetSequencerChannels(ADC1, HW_OPTO_CH | HW_BATT_CH);
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <_AD_Init+0xb8>)
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <_AD_Init+0xb0>)
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff fd56 	bl	8000ac8 <LL_ADC_REG_SetSequencerChannels>

   NVIC_SetPriority(ADC1_COMP_IRQn, 2);
 800101c:	2102      	movs	r1, #2
 800101e:	200c      	movs	r0, #12
 8001020:	f7ff fbd0 	bl	80007c4 <NVIC_SetPriority>
   NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001024:	200c      	movs	r0, #12
 8001026:	f7ff fbb7 	bl	8000798 <NVIC_EnableIRQ>

   LL_ADC_EnableIT_EOC(ADC1);
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <_AD_Init+0xb0>)
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fdb0 	bl	8000b92 <LL_ADC_EnableIT_EOC>

   LL_ADC_Enable(ADC1);
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <_AD_Init+0xb0>)
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fd7d 	bl	8000b34 <LL_ADC_Enable>
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	40012400 	.word	0x40012400
 8001048:	40012708 	.word	0x40012708
 800104c:	10000011 	.word	0x10000011

08001050 <HW_StartAdc>:

void HW_StartAdc(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  g_nActualAdcChannel = hw_adc_opto;
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HW_StartAdc+0x18>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  LL_ADC_REG_StartConversion(ADC1);
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HW_StartAdc+0x1c>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fd7b 	bl	8000b58 <LL_ADC_REG_StartConversion>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000040 	.word	0x20000040
 800106c:	40012400 	.word	0x40012400

08001070 <_Gpio_Init>:

void _Gpio_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff fc3f 	bl	80008f8 <LL_IOP_GRP1_EnableClock>

  // led
  LL_GPIO_SetPinMode(GET_PORT(LED), GET_PIN(LED), LL_GPIO_MODE_ALTERNATE);
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	2202      	movs	r2, #2
 8001080:	2102      	movs	r1, #2
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff fc5e 	bl	8000944 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(GET_PORT(LED), GET_PIN(LED), LL_GPIO_OUTPUT_PUSHPULL);
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fc74 	bl	800097e <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(GET_PORT(LED), GET_PIN(LED), LL_GPIO_PULL_NO);
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	2200      	movs	r2, #0
 800109c:	2102      	movs	r1, #2
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fc82 	bl	80009a8 <LL_GPIO_SetPinPull>
  GPIO_SetAFpin(LED, LL_GPIO_AF_2);
 80010a4:	2102      	movs	r1, #2
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fb18 	bl	80006dc <GPIO_SetAFpin>

  // batt ctrl
  LL_GPIO_SetPinMode(GET_PORT(BATT_CTRL), GET_PIN(BATT_CTRL), LL_GPIO_MODE_OUTPUT);
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	2201      	movs	r2, #1
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fc45 	bl	8000944 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(GET_PORT(BATT_CTRL), GET_PIN(BATT_CTRL), LL_GPIO_OUTPUT_PUSHPULL);
 80010ba:	23a0      	movs	r3, #160	; 0xa0
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	2200      	movs	r2, #0
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff fc5b 	bl	800097e <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(GET_PORT(BATT_CTRL), GET_PIN(BATT_CTRL), LL_GPIO_PULL_NO);
 80010c8:	23a0      	movs	r3, #160	; 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	2200      	movs	r2, #0
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fc69 	bl	80009a8 <LL_GPIO_SetPinPull>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_PwmInit>:
//
//  return nValue;
//}

void _PwmInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff fbdc 	bl	80008a0 <LL_APB1_GRP1_EnableClock>

  LL_RCC_ClocksTypeDef  RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80010e8:	003b      	movs	r3, r7
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f908 	bl	8000300 <LL_RCC_GetSystemClocksFreq>

  LL_TIM_SetPrescaler(TIM_PWM, RCC_Clocks.PCLK1_Frequency / (100 * PWM_STEPS));  // frekvence PWM
 80010f0:	003b      	movs	r3, r7
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	23c8      	movs	r3, #200	; 0xc8
 80010f6:	00d9      	lsls	r1, r3, #3
 80010f8:	0010      	movs	r0, r2
 80010fa:	f7ff f805 	bl	8000108 <__udivsi3>
 80010fe:	0003      	movs	r3, r0
 8001100:	001a      	movs	r2, r3
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fd6d 	bl	8000be8 <LL_TIM_SetPrescaler>
  LL_TIM_SetAutoReload(TIM_PWM, PWM_STEPS - 2);
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	210e      	movs	r1, #14
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fd73 	bl	8000c00 <LL_TIM_SetAutoReload>

  LL_TIM_OC_SetMode(TIM_PWM, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	2260      	movs	r2, #96	; 0x60
 8001120:	2110      	movs	r1, #16
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fd98 	bl	8000c58 <LL_TIM_OC_SetMode>
  LL_TIM_OC_EnablePreload(TIM_PWM, LL_TIM_CHANNEL_CH2);
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	05db      	lsls	r3, r3, #23
 800112c:	2110      	movs	r1, #16
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fdfe 	bl	8000d30 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_SetPolarity(TIM_PWM, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_LOW);
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	2202      	movs	r2, #2
 800113a:	2110      	movs	r1, #16
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fdc5 	bl	8000ccc <LL_TIM_OC_SetPolarity>
  LL_TIM_CC_EnableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	2110      	movs	r1, #16
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff fd65 	bl	8000c18 <LL_TIM_CC_EnableChannel>

  LL_TIM_GenerateEvent_UPDATE(TIM_PWM);
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fe38 	bl	8000dc8 <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_EnableIT_UPDATE(TIM_PWM);
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fe25 	bl	8000dac <LL_TIM_EnableIT_UPDATE>

  // povolit preruseni od TIM3
  NVIC_SetPriority(TIM2_IRQn, 1);    // Set priority
 8001162:	2101      	movs	r1, #1
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff fb2d 	bl	80007c4 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);         // Enable _IRQn
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff fb14 	bl	8000798 <NVIC_EnableIRQ>

#ifdef DEBUG
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM2_STOP);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fbd7 	bl	8000924 <LL_DBGMCU_APB1_GRP1_FreezePeriph>
#endif


  LL_TIM_EnableCounter(TIM_PWM);
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff fd17 	bl	8000bae <LL_TIM_EnableCounter>
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}

08001188 <HW_PwmSet>:

void HW_PwmSet(uint16_t nValue)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	801a      	strh	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH2(TIM_PWM, nValue);
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff fdf8 	bl	8000d94 <LL_TIM_OC_SetCompareCH2>
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HW_PwmOn>:

void HW_PwmOn(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  LL_TIM_CC_EnableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2110      	movs	r1, #16
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fd2e 	bl	8000c18 <LL_TIM_CC_EnableChannel>
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HW_PwmOff>:

void HW_PwmOff(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0
  LL_TIM_CC_DisableChannel(TIM_PWM, LL_TIM_CHANNEL_CH2);
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	2110      	movs	r1, #16
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fd32 	bl	8000c36 <LL_TIM_CC_DisableChannel>
  LL_TIM_DisableCounter(TIM_PWM);
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff fcf7 	bl	8000bca <LL_TIM_DisableCounter>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HW_BatVoltageCtrl>:
{
  bEnable ? LED_ON : LED_OFF;
}

void HW_BatVoltageCtrl(bool bEnable)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	0002      	movs	r2, r0
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	701a      	strb	r2, [r3, #0]
  bEnable ? BATT_CTRL_EN : BATT_CTRL_DIS;
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HW_BatVoltageCtrl+0x1e>
 80011f6:	23a0      	movs	r3, #160	; 0xa0
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fe:	e003      	b.n	8001208 <HW_BatVoltageCtrl+0x26>
  bEnable ? BATT_CTRL_EN : BATT_CTRL_DIS;
 8001200:	23a0      	movs	r3, #160	; 0xa0
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	619a      	str	r2, [r3, #24]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HW_SetTimCallback>:

void HW_SetTimCallback(PtrTimIntCb pTimCb)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  g_pTimCb = pTimCb;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HW_SetTimCallback+0x18>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000048 	.word	0x20000048

0800122c <HW_GetBatVoltage>:

uint32_t HW_GetBatVoltage(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return g_nBatVoltage_mV;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HW_GetBatVoltage+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000000 	.word	0x20000000

08001240 <HW_GetOptoVoltage>:

uint32_t HW_GetOptoVoltage(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  return g_nOptoVoltage_mV;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HW_GetOptoVoltage+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	20000004 	.word	0x20000004

08001254 <_CalculateAdcVoltage>:

void _CalculateAdcVoltage(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  // calculate opto voltage
  g_nOptoVoltage_mV = (uint32_t)g_nAdcValues[hw_adc_opto] * HW_ADC_VOLTAGE_MV / 256;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <_CalculateAdcVoltage+0x64>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	001a      	movs	r2, r3
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <_CalculateAdcVoltage+0x68>)
 8001260:	4353      	muls	r3, r2
 8001262:	0a1a      	lsrs	r2, r3, #8
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <_CalculateAdcVoltage+0x6c>)
 8001266:	601a      	str	r2, [r3, #0]
  g_nOptoVoltage_mV = g_nOptoVoltage_mV * HW_ADC_RESISTOR_DIVIDER_OPTO;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_CalculateAdcVoltage+0x6c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	22fa      	movs	r2, #250	; 0xfa
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	435a      	muls	r2, r3
 8001272:	23fa      	movs	r3, #250	; 0xfa
 8001274:	0099      	lsls	r1, r3, #2
 8001276:	0010      	movs	r0, r2
 8001278:	f7fe ff46 	bl	8000108 <__udivsi3>
 800127c:	0003      	movs	r3, r0
 800127e:	001a      	movs	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <_CalculateAdcVoltage+0x6c>)
 8001282:	601a      	str	r2, [r3, #0]

  // calculate batt voltage
  g_nBatVoltage_mV = (uint32_t)g_nAdcValues[hw_adc_batt] * HW_ADC_VOLTAGE_MV / 256;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_CalculateAdcVoltage+0x64>)
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	001a      	movs	r2, r3
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <_CalculateAdcVoltage+0x68>)
 800128c:	4353      	muls	r3, r2
 800128e:	0a1a      	lsrs	r2, r3, #8
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <_CalculateAdcVoltage+0x70>)
 8001292:	601a      	str	r2, [r3, #0]
  g_nBatVoltage_mV = g_nBatVoltage_mV * HW_ADC_RESISTOR_DIVIDER_BATT;
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <_CalculateAdcVoltage+0x70>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	22fa      	movs	r2, #250	; 0xfa
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	435a      	muls	r2, r3
 800129e:	2358      	movs	r3, #88	; 0x58
 80012a0:	33ff      	adds	r3, #255	; 0xff
 80012a2:	0019      	movs	r1, r3
 80012a4:	0010      	movs	r0, r2
 80012a6:	f7fe ff2f 	bl	8000108 <__udivsi3>
 80012aa:	0003      	movs	r3, r0
 80012ac:	001a      	movs	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <_CalculateAdcVoltage+0x70>)
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000044 	.word	0x20000044
 80012bc:	00000bb8 	.word	0x00000bb8
 80012c0:	20000004 	.word	0x20000004
 80012c4:	20000000 	.word	0x20000000

080012c8 <HW_IsAdcConverted>:

bool HW_IsAdcConverted(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  return g_bAdcConverted;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HW_IsAdcConverted+0x10>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000046 	.word	0x20000046

080012dc <HW_ResetAdcConverted>:

void HW_ResetAdcConverted(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  g_bAdcConverted = false;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HW_ResetAdcConverted+0x10>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000046 	.word	0x20000046

080012f0 <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  g_nAdcValues[g_nActualAdcChannel] = LL_ADC_REG_ReadConversionData8(ADC1);
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <ADC1_COMP_IRQHandler+0x40>)
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <ADC1_COMP_IRQHandler+0x44>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fc3e 	bl	8000b7c <LL_ADC_REG_ReadConversionData8>
 8001300:	0003      	movs	r3, r0
 8001302:	001a      	movs	r2, r3
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <ADC1_COMP_IRQHandler+0x48>)
 8001306:	551a      	strb	r2, [r3, r4]
  g_nActualAdcChannel++;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <ADC1_COMP_IRQHandler+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <ADC1_COMP_IRQHandler+0x40>)
 8001310:	601a      	str	r2, [r3, #0]
  if (g_nActualAdcChannel == hw_adc_sizeof)
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <ADC1_COMP_IRQHandler+0x40>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <ADC1_COMP_IRQHandler+0x3a>
  {
    g_bAdcConverted = true;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <ADC1_COMP_IRQHandler+0x4c>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
    HW_BatVoltageCtrl(false);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff ff5e 	bl	80011e2 <HW_BatVoltageCtrl>
    _CalculateAdcVoltage();
 8001326:	f7ff ff95 	bl	8001254 <_CalculateAdcVoltage>
  }
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	bdb0      	pop	{r4, r5, r7, pc}
 8001330:	20000040 	.word	0x20000040
 8001334:	40012400 	.word	0x40012400
 8001338:	20000044 	.word	0x20000044
 800133c:	20000046 	.word	0x20000046

08001340 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  if (!(TIM_PWM->SR & TIM_SR_UIF))
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2201      	movs	r2, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d00f      	beq.n	8001370 <TIM2_IRQHandler+0x30>
  {
    return;
  }

  TIM_PWM->SR &= ~TIM_SR_UIF;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	05d2      	lsls	r2, r2, #23
 8001358:	6912      	ldr	r2, [r2, #16]
 800135a:	2101      	movs	r1, #1
 800135c:	438a      	bics	r2, r1
 800135e:	611a      	str	r2, [r3, #16]

  if (g_pTimCb)
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <TIM2_IRQHandler+0x38>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <TIM2_IRQHandler+0x32>
  {
    g_pTimCb();
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <TIM2_IRQHandler+0x38>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4798      	blx	r3
 800136e:	e000      	b.n	8001372 <TIM2_IRQHandler+0x32>
    return;
 8001370:	46c0      	nop			; (mov r8, r8)
  }

}
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000048 	.word	0x20000048

0800137c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  App_Init();
 8001380:	f7ff f8ae 	bl	80004e0 <App_Init>

  while(1)
  {
    App_Exec();
 8001384:	f7ff f8cc 	bl	8000520 <App_Exec>
 8001388:	e7fc      	b.n	8001384 <main+0x8>
	...

0800138c <NVIC_SetPriority>:
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	0002      	movs	r2, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b7f      	cmp	r3, #127	; 0x7f
 80013a0:	d932      	bls.n	8001408 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80013a2:	4c2f      	ldr	r4, [pc, #188]	; (8001460 <NVIC_SetPriority+0xd4>)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	001a      	movs	r2, r3
 80013aa:	230f      	movs	r3, #15
 80013ac:	4013      	ands	r3, r2
 80013ae:	3b08      	subs	r3, #8
 80013b0:	0899      	lsrs	r1, r3, #2
 80013b2:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <NVIC_SetPriority+0xd4>)
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	230f      	movs	r3, #15
 80013bc:	4003      	ands	r3, r0
 80013be:	3b08      	subs	r3, #8
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3306      	adds	r3, #6
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1dfa      	adds	r2, r7, #7
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	0010      	movs	r0, r2
 80013d2:	2203      	movs	r2, #3
 80013d4:	4002      	ands	r2, r0
 80013d6:	00d2      	lsls	r2, r2, #3
 80013d8:	20ff      	movs	r0, #255	; 0xff
 80013da:	4090      	lsls	r0, r2
 80013dc:	0002      	movs	r2, r0
 80013de:	43d2      	mvns	r2, r2
 80013e0:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	20ff      	movs	r0, #255	; 0xff
 80013e8:	4018      	ands	r0, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	001d      	movs	r5, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	402b      	ands	r3, r5
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4098      	lsls	r0, r3
 80013f8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80013fa:	431a      	orrs	r2, r3
 80013fc:	1d8b      	adds	r3, r1, #6
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	18e3      	adds	r3, r4, r3
 8001402:	3304      	adds	r3, #4
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	e027      	b.n	8001458 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001408:	4c16      	ldr	r4, [pc, #88]	; (8001464 <NVIC_SetPriority+0xd8>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	4914      	ldr	r1, [pc, #80]	; (8001464 <NVIC_SetPriority+0xd8>)
 8001414:	1dfa      	adds	r2, r7, #7
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	b252      	sxtb	r2, r2
 800141a:	0892      	lsrs	r2, r2, #2
 800141c:	32c0      	adds	r2, #192	; 0xc0
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	5852      	ldr	r2, [r2, r1]
 8001422:	1df9      	adds	r1, r7, #7
 8001424:	7809      	ldrb	r1, [r1, #0]
 8001426:	0008      	movs	r0, r1
 8001428:	2103      	movs	r1, #3
 800142a:	4001      	ands	r1, r0
 800142c:	00c9      	lsls	r1, r1, #3
 800142e:	20ff      	movs	r0, #255	; 0xff
 8001430:	4088      	lsls	r0, r1
 8001432:	0001      	movs	r1, r0
 8001434:	43c9      	mvns	r1, r1
 8001436:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	0192      	lsls	r2, r2, #6
 800143c:	20ff      	movs	r0, #255	; 0xff
 800143e:	4010      	ands	r0, r2
 8001440:	1dfa      	adds	r2, r7, #7
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	0015      	movs	r5, r2
 8001446:	2203      	movs	r2, #3
 8001448:	402a      	ands	r2, r5
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	4090      	lsls	r0, r2
 800144e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001450:	430a      	orrs	r2, r1
 8001452:	33c0      	adds	r3, #192	; 0xc0
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	511a      	str	r2, [r3, r4]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bdb0      	pop	{r4, r5, r7, pc}
 8001460:	e000ed00 	.word	0xe000ed00
 8001464:	e000e100 	.word	0xe000e100

08001468 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <SysTick_Config+0x40>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <SysTick_Config+0x16>
 800147a:	2301      	movs	r3, #1
 800147c:	e010      	b.n	80014a0 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <SysTick_Config+0x44>)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	3a01      	subs	r2, #1
 8001484:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001486:	2301      	movs	r3, #1
 8001488:	425b      	negs	r3, r3
 800148a:	2103      	movs	r1, #3
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff7d 	bl	800138c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SysTick_Config+0x44>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x44>)
 800149a:	2207      	movs	r2, #7
 800149c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800149e:	2300      	movs	r3, #0
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	00ffffff 	.word	0x00ffffff
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <Timer_Init>:
static volatile timer_tick_t g_nTicks = 0;

PtrSysTickCallback pSysTickCallback = 0;

void Timer_Init()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 80014b4:	f000 f8ce 	bl	8001654 <SystemCoreClockUpdate>
  if (SysTick_Config(SystemCoreClock / 1000))
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <Timer_Init+0x30>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	23fa      	movs	r3, #250	; 0xfa
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	0010      	movs	r0, r2
 80014c2:	f7fe fe21 	bl	8000108 <__udivsi3>
 80014c6:	0003      	movs	r3, r0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ffcd 	bl	8001468 <SysTick_Config>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d000      	beq.n	80014d4 <Timer_Init+0x24>
  {
    /* Capture error */
    while (1);
 80014d2:	e7fe      	b.n	80014d2 <Timer_Init+0x22>
  }

  TimerUs_init();
 80014d4:	f000 f838 	bl	8001548 <TimerUs_init>
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	20000008 	.word	0x20000008

080014e4 <Timer_GetTicks_ms>:
  nDelayTimer = delay_ms;
  while (nDelayTimer);
}

timer_tick_t Timer_GetTicks_ms()
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  return g_nTicks;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <Timer_GetTicks_ms+0x14>)
 80014ea:	685c      	ldr	r4, [r3, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	0021      	movs	r1, r4
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000050 	.word	0x20000050

080014fc <SysTick_Handler>:
{
  pSysTickCallback = pFunction;
}

void SysTick_Handler(void)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  g_nTicks++;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <SysTick_Handler+0x40>)
 8001502:	685c      	ldr	r4, [r3, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	2200      	movs	r2, #0
 800150a:	185b      	adds	r3, r3, r1
 800150c:	4154      	adcs	r4, r2
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <SysTick_Handler+0x40>)
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	6054      	str	r4, [r2, #4]
  if (nDelayTimer)
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SysTick_Handler+0x44>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <SysTick_Handler+0x2a>
  {
    nDelayTimer--;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SysTick_Handler+0x44>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <SysTick_Handler+0x44>)
 8001524:	601a      	str	r2, [r3, #0]
  }

  if (pSysTickCallback)
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <SysTick_Handler+0x48>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <SysTick_Handler+0x38>
  {
    pSysTickCallback();
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Handler+0x48>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4798      	blx	r3
  }
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	20000050 	.word	0x20000050
 8001540:	2000004c 	.word	0x2000004c
 8001544:	20000058 	.word	0x20000058

08001548 <TimerUs_init>:


// timer for us counting
void TimerUs_init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    // Enable clock for TIM22
    RCC->APB2ENR |= TIMER_US_CLK;
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <TimerUs_init+0x18>)
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <TimerUs_init+0x18>)
 8001550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001552:	2104      	movs	r1, #4
 8001554:	430a      	orrs	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40021000 	.word	0x40021000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001566:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001568:	2004      	movs	r0, #4
    LDR R1, [R0]
 800156a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800156c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800156e:	221f      	movs	r2, #31
    CMP R1, R2
 8001570:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001572:	d105      	bne.n	8001580 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8001576:	2101      	movs	r1, #1
    STR R1, [R0]
 8001578:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <LoopForever+0xa>)
    LDR R1,=0x00000000
 800157c:	2100      	movs	r1, #0
    STR R1, [R0]
 800157e:	6001      	str	r1, [r0, #0]

08001580 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001580:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001582:	e003      	b.n	800158c <LoopCopyDataInit>

08001584 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8001586:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001588:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800158a:	3104      	adds	r1, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopForever+0x12>)
  ldr  r3, =_edata
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <LoopForever+0x16>)
  adds  r2, r0, r1
 8001590:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001594:	d3f6      	bcc.n	8001584 <CopyDataInit>
  ldr  r2, =_sbss
 8001596:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0x1a>)
  b  LoopFillZerobss
 8001598:	e002      	b.n	80015a0 <LoopFillZerobss>

0800159a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800159a:	2300      	movs	r3, #0
  str  r3, [r2]
 800159c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159e:	3204      	adds	r2, #4

080015a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <LoopForever+0x1e>)
  cmp  r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a4:	d3f9      	bcc.n	800159a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015a6:	f000 f817 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f000 f8ed 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fee5 	bl	800137c <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
   ldr   r0, =_estack
 80015b4:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 80015b8:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 80015bc:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 80015c0:	08001a84 	.word	0x08001a84
  ldr  r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015c8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80015cc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80015d0:	2000005c 	.word	0x2000005c

080015d4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <DMA1_Channel1_IRQHandler>
	...

080015d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <SystemInit+0x64>)
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <SystemInit+0x64>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemInit+0x64>)
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <SystemInit+0x64>)
 80015ee:	68d2      	ldr	r2, [r2, #12]
 80015f0:	4913      	ldr	r1, [pc, #76]	; (8001640 <SystemInit+0x68>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <SystemInit+0x64>)
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <SystemInit+0x64>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <SystemInit+0x6c>)
 80015fe:	400a      	ands	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <SystemInit+0x64>)
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <SystemInit+0x64>)
 8001606:	6892      	ldr	r2, [r2, #8]
 8001608:	2101      	movs	r1, #1
 800160a:	438a      	bics	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <SystemInit+0x64>)
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SystemInit+0x64>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <SystemInit+0x70>)
 8001616:	400a      	ands	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <SystemInit+0x64>)
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <SystemInit+0x64>)
 800161e:	68d2      	ldr	r2, [r2, #12]
 8001620:	490a      	ldr	r1, [pc, #40]	; (800164c <SystemInit+0x74>)
 8001622:	400a      	ands	r2, r1
 8001624:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <SystemInit+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <SystemInit+0x78>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	0512      	lsls	r2, r2, #20
 8001632:	609a      	str	r2, [r3, #8]
#endif
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	40021000 	.word	0x40021000
 8001640:	88ff400c 	.word	0x88ff400c
 8001644:	fef6fff6 	.word	0xfef6fff6
 8001648:	fffbffff 	.word	0xfffbffff
 800164c:	ff02ffff 	.word	0xff02ffff
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800166e:	4b40      	ldr	r3, [pc, #256]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	220c      	movs	r2, #12
 8001674:	4013      	ands	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d018      	beq.n	80016b0 <SystemCoreClockUpdate+0x5c>
 800167e:	d802      	bhi.n	8001686 <SystemCoreClockUpdate+0x32>
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <SystemCoreClockUpdate+0x3c>
 8001684:	e052      	b.n	800172c <SystemCoreClockUpdate+0xd8>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d016      	beq.n	80016b8 <SystemCoreClockUpdate+0x64>
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d018      	beq.n	80016c0 <SystemCoreClockUpdate+0x6c>
 800168e:	e04d      	b.n	800172c <SystemCoreClockUpdate+0xd8>
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0b5b      	lsrs	r3, r3, #13
 8001696:	2207      	movs	r2, #7
 8001698:	4013      	ands	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0212      	lsls	r2, r2, #8
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	001a      	movs	r2, r3
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <SystemCoreClockUpdate+0x120>)
 80016ac:	601a      	str	r2, [r3, #0]
      break;
 80016ae:	e04d      	b.n	800174c <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <SystemCoreClockUpdate+0x120>)
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <SystemCoreClockUpdate+0x124>)
 80016b4:	601a      	str	r2, [r3, #0]
      break;
 80016b6:	e049      	b.n	800174c <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <SystemCoreClockUpdate+0x120>)
 80016ba:	4a30      	ldr	r2, [pc, #192]	; (800177c <SystemCoreClockUpdate+0x128>)
 80016bc:	601a      	str	r2, [r3, #0]
      break;
 80016be:	e045      	b.n	800174c <SystemCoreClockUpdate+0xf8>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	23f0      	movs	r3, #240	; 0xf0
 80016c6:	039b      	lsls	r3, r3, #14
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	23c0      	movs	r3, #192	; 0xc0
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <SystemCoreClockUpdate+0x12c>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0d9b      	lsrs	r3, r3, #22
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	4013      	ands	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <SystemCoreClockUpdate+0xc0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <SystemCoreClockUpdate+0x124>)
 8001700:	4353      	muls	r3, r2
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fcff 	bl	8000108 <__udivsi3>
 800170a:	0003      	movs	r3, r0
 800170c:	001a      	movs	r2, r3
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <SystemCoreClockUpdate+0x120>)
 8001710:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001712:	e01b      	b.n	800174c <SystemCoreClockUpdate+0xf8>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <SystemCoreClockUpdate+0x128>)
 8001718:	4353      	muls	r3, r2
 800171a:	68f9      	ldr	r1, [r7, #12]
 800171c:	0018      	movs	r0, r3
 800171e:	f7fe fcf3 	bl	8000108 <__udivsi3>
 8001722:	0003      	movs	r3, r0
 8001724:	001a      	movs	r2, r3
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <SystemCoreClockUpdate+0x120>)
 8001728:	601a      	str	r2, [r3, #0]
      break;
 800172a:	e00f      	b.n	800174c <SystemCoreClockUpdate+0xf8>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	0b5b      	lsrs	r3, r3, #13
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0212      	lsls	r2, r2, #8
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	001a      	movs	r2, r3
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <SystemCoreClockUpdate+0x120>)
 8001748:	601a      	str	r2, [r3, #0]
      break;
 800174a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <SystemCoreClockUpdate+0x11c>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	220f      	movs	r2, #15
 8001754:	4013      	ands	r3, r2
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <SystemCoreClockUpdate+0x130>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SystemCoreClockUpdate+0x120>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	40da      	lsrs	r2, r3
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <SystemCoreClockUpdate+0x120>)
 8001766:	601a      	str	r2, [r3, #0]
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b006      	add	sp, #24
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	20000008 	.word	0x20000008
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
 8001780:	08001a70 	.word	0x08001a70
 8001784:	08001a58 	.word	0x08001a58

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	2600      	movs	r6, #0
 800178c:	4d0c      	ldr	r5, [pc, #48]	; (80017c0 <__libc_init_array+0x38>)
 800178e:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <__libc_init_array+0x3c>)
 8001790:	1b64      	subs	r4, r4, r5
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	2600      	movs	r6, #0
 800179a:	f000 f819 	bl	80017d0 <_init>
 800179e:	4d0a      	ldr	r5, [pc, #40]	; (80017c8 <__libc_init_array+0x40>)
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <__libc_init_array+0x44>)
 80017a2:	1b64      	subs	r4, r4, r5
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	00b3      	lsls	r3, r6, #2
 80017ae:	58eb      	ldr	r3, [r5, r3]
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	00b3      	lsls	r3, r6, #2
 80017b8:	58eb      	ldr	r3, [r5, r3]
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08001a7c 	.word	0x08001a7c
 80017c4:	08001a7c 	.word	0x08001a7c
 80017c8:	08001a7c 	.word	0x08001a7c
 80017cc:	08001a80 	.word	0x08001a80

080017d0 <_init>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr

080017dc <_fini>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr
